{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/android-chrome-192x192.png","path":"images/android-chrome-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/android-chrome-512x512.png","path":"images/android-chrome-512x512.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/site.webmanifest","path":"images/site.webmanifest","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1607456519626},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1607456521215},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1607456521216},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1607456521216},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1607456521216},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1607456521216},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1607456521227},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1607456521216},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1607456521216},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1607456521217},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1607456521217},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1607456521217},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1607456521217},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1607456521217},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1607456521217},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1607456521218},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1607456521218},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1607456521218},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1607456521218},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1607456521226},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1607456521226},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1607456521226},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1607456521226},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1607456521227},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1607456521227},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1607456521226},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1607456521227},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1607456521219},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1607456521219},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1607456521219},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1607456521219},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1607456521219},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1607456521220},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1607456521220},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1607456521220},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1607456521220},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1607456521221},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1607456521223},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1607456521224},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1607456521225},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1607456521225},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1607456521225},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1607456521225},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1607456521228},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1607456521231},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1607456521237},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1607456521237},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1607456521238},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1607456521237},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1607456521238},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1607456521238},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1607456521239},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1607456521240},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1607456521240},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1607456521242},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1607456521243},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1607456521221},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1607456521222},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1607456521222},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1607456521231},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1607456521222},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1607456521222},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1607456521222},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1607456521231},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1607456521228},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1607456521228},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1607456521228},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1607456521229},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1607456521229},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1607456521229},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1607456521229},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1607456521230},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1607456521230},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1607456521230},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1607456521233},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1607456521232},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1607456521239},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1607456521239},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1607456521239},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1607456521235},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1607456521240},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1607456521240},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1607456521240},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1607456521235},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1607456521234},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1607456521237},{"_id":"source/about/index.md","hash":"522188e4953d398c6b4a248b677b5dc45291a924","modified":1607456732250},{"_id":"source/_posts/holis.md","hash":"470025b24ca0abba581e58300b133740e1046d63","modified":1607460072458},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1607456606927},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1607456606928},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1607456606928},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1607456606928},{"_id":"themes/cactus/README.md","hash":"d14df99af19e2955915fb28d4bf839776005000c","modified":1607456606928},{"_id":"themes/cactus/_config.yml","hash":"7f540bd6ae7b697b5faf898b8cd4acc62b8b5f73","modified":1607559634881},{"_id":"themes/cactus/gulpfile.js","hash":"0e55606323a45873506c08be6528478c08373e1e","modified":1607456606929},{"_id":"themes/cactus/package.json","hash":"a6060fadd36114d8cb74e7ff4c7d073901b5edcd","modified":1607456606934},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1607456606929},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1607456606929},{"_id":"themes/cactus/languages/en.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1607456606929},{"_id":"themes/cactus/languages/default.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1607456606929},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1607456606929},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1607456606929},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1607456606930},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1607456606930},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1607456606930},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1607456606930},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1607456606930},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1607456606930},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1607456606930},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1607456606930},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1607456606931},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1607456606934},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1607456606931},{"_id":"themes/cactus/layout/index.ejs","hash":"d5d42dc8e01328fe215f9043292a0696a92db35c","modified":1607456606934},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1607456606931},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1607456606934},{"_id":"themes/cactus/layout/post.ejs","hash":"f9149f294e6142437c58784c41f1d082a61c8b82","modified":1607456606934},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1607456606935},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1607456606935},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1607456606935},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1607456606935},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1607456606934},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1607456606931},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"116424c97ec87f0d8124095e73d458eb6f4f12a0","modified":1607456606931},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"cb3ca34fb0db2578c6c64e14922c17de1cf2afcc","modified":1607456606932},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1607456606932},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"ab38dbf9b11f829e165f1a0aa6a60d556f94a0a6","modified":1607456606932},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"b60f6bf5fd8aa0aa1425ff6425532c01d1354045","modified":1607456606933},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1607456606933},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1607456606947},{"_id":"themes/cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1607456606950},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1607456606950},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1607456606950},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1607456606936},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1607456606934},{"_id":"themes/cactus/source/css/style.styl","hash":"18b22cfdc7457d81db7694aef5850cc36ff87a77","modified":1607456606950},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1607456606936},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"9210d9ed6cf2736c502f5d4fce1d27f3e49ef5f5","modified":1607557505672},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1607456606953},{"_id":"themes/cactus/source/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1607456606953},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"eb11efc8fc69bed424f61c02af07a81f98d675b5","modified":1607557487479},{"_id":"themes/cactus/source/images/favicon.ico","hash":"92d048c309d174191cd5041bc2088ae830292580","modified":1607557505788},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1607456606932},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1607456606932},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1607456606932},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"ad1a1410eeede208dea07e8d08cc54554421dc13","modified":1607559158423},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1607456606933},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1607456606933},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1607456606933},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1607456606933},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1607456606936},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1607456606936},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1607456606936},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1607456606937},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1607456606937},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1607456606937},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1607456606937},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1607456606935},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1607456606937},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1607456606938},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1607456606937},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1607456606938},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1607456606938},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1607456606938},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1607456606938},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1607456606938},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1607456606939},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1607456606939},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1607456606939},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1607456606939},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1607456606939},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1607456606939},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1607456606939},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1607456606940},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1607456606939},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1607456606940},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1607456606940},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1607456606940},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1607456606940},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1607456606940},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1607456606941},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1607456606940},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1607456606941},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1607456606941},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1607456606941},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1607456606941},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1607456606942},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1607456606942},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1607456606941},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1607456606942},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1607456606942},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1607456606942},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1607456606942},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1607456606942},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1607456606942},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1607456606943},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1607456606943},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1607456606943},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1607456606943},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1607456606943},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1607456606943},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1607456606943},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1607456606943},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1607456606944},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1607456606944},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1607456606944},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1607456606944},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1607456606944},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1607456606944},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1607456606945},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1607456606945},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1607456606945},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1607456606945},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1607456606945},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1607456606945},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1607456606946},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1607456606946},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1607456606946},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1607456606946},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1607456606946},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1607456606946},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1607456606946},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1607456606947},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1607456606947},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1607456606947},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1607456606947},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1607456606947},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1607456606947},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1607456606948},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1607456606948},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1607456606948},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"14dda7f155bb21e6cd33ca3d8daa5b489b4707b3","modified":1607456606948},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"7f18929e7f4ad6d20da374e8b9f85ce587220a87","modified":1607456606948},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1607456606948},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1607456606948},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1607456606949},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1607456606949},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1607456606949},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1607456606953},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1607456606993},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1607456606993},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1607456606996},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1607456606996},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1607456606998},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1607456606998},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1607456607001},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1607456607001},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1607456607004},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1607456607006},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1607456607006},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1607456607003},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"6c7de03f5ea6fd78cea48d595315b397e8e7c52c","modified":1607559517210},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1607456606949},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1607456607006},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1607456606962},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1607456606954},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1607456606963},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1607456606963},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1607456606964},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1607456606973},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1607456606973},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1607456606972},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1607456606992},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1607456606997},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1607456606993},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1607456606994},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1607456606995},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1607456606998},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1607456607000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1607456607005},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1607456606999},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1607456607003},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1607456607002},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1607456607005},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1607456606961},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1607456606962},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1607456606971},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1607456606971},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1607456606955},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1607456606961},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1607456606963},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1607456606965},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1607456606970},{"_id":"themes/cactus/source/images/logo.png","hash":"1cc0a39aeeeb1030963d597a0b64a8eeb0605c76","modified":1607557173100},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1607456606983},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1607456606981},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1607456606986},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1607456606989},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1607456606987},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1607456606988},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1607456606989},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1607456606979},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1607456606984},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1607456606984},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1607456606987},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1607456606990},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1607456606959},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1607456606969},{"_id":"source/_posts/es6-arrow-functions/index.md","hash":"5cf28eec9396a7eac041d22c322754fcc0c29eee","modified":1607556255716},{"_id":"source/_posts/golang-and-interfaces-misuse/index.md","hash":"c4fd408de4c9cab29b1a7babc771e13fac5163e6","modified":1607556255739},{"_id":"source/_posts/migrate-node-package-typescript-rollup/index.md","hash":"b438d316258e8157745addcce027e1b11dd0c04d","modified":1607556255755},{"_id":"source/_posts/redis-stunnel-and-c/index.md","hash":"d167fefce9388e41b2a4785311bf7bcb5305c430","modified":1607556255774},{"_id":"source/_posts/redis-stunnel-and-c/redis-cli-result.png","hash":"13cfa18d9792ae2f5c86237e81d0549731a96b2b","modified":1607556255775},{"_id":"source/_posts/resilience-disyuntor-nodejs-circuit-breaker/index.md","hash":"d317b76f486fa26a335116fabad6165f71baf388","modified":1607556255799},{"_id":"source/_posts/redis-stunnel-and-c/cert-file.png","hash":"293c6443e12806911ef90d10003ac6f350fec72d","modified":1607556255772},{"_id":"source/_posts/redis-stunnel-and-c/import-cert.png","hash":"d4d4b7327e96b1477245d967fcb254e5a20900a9","modified":1607556255773},{"_id":"source/_posts/redis-stunnel-and-c/redis-ssl-start.png","hash":"c9f422efaa749c4515f14d05406a10dc5bdb0d43","modified":1607556255777},{"_id":"source/_posts/software-as-stitching/index.md","hash":"2c5bcb6f53a60fec9c6253201a34ec98d035d5b3","modified":1607556255817},{"_id":"source/_posts/software-as-stitching/stitching-3.jpg","hash":"073f1c5ee385c2f2a85bcff635679550a4d4f748","modified":1607556255821},{"_id":"source/_posts/software-as-stitching/stitching-2.jpg","hash":"ed674638265165e49d86a6f8f9f8d7787266278b","modified":1607556255820},{"_id":"source/_posts/typescript_jest_axios/index.md","hash":"4e5da081413bccb930a94194e5d185be248f323c","modified":1607556255919},{"_id":"source/_posts/software-as-stitching/stitching.jpg","hash":"81745741f3550a4bbae3db21e2c6f4c9277d63ff","modified":1607556255877},{"_id":"source/_posts/software-as-stitching.md","hash":"85d548427b0404dc5a451fe330aee0628699b9bc","modified":1607559192885},{"_id":"source/_posts/es6-arrow-functions.md","hash":"ef813664f1c33dcf333723e5832aaa151dd75a19","modified":1607559175919},{"_id":"source/_posts/golang-and-interfaces-misuse.md","hash":"3f6dd398689499a509433bff200b05825f178cd8","modified":1607558797748},{"_id":"source/_posts/migrate-node-package-typescript-rollup.md","hash":"75afb3e4329b9effe8671adba65f9e6f77320e89","modified":1607558847254},{"_id":"source/_posts/redis-stunnel-and-c.md","hash":"03a7ed735579a23a2d6c32e7ebdf9f747cfc11c3","modified":1607559267388},{"_id":"source/_posts/resilience-disyuntor-nodejs-circuit-breaker.md","hash":"e9f996383c8dec7747f63df89bed386c73d985ba","modified":1607559198887},{"_id":"source/_posts/typescript_jest_axios.md","hash":"e13f6bf0250e0623e274af746e54e3d2fbdcc8c2","modified":1607559186654},{"_id":"themes/cactus/source/images/android-chrome-192x192.png","hash":"eb11efc8fc69bed424f61c02af07a81f98d675b5","modified":1607557505448},{"_id":"themes/cactus/source/images/android-chrome-512x512.png","hash":"664c2cb6dce45bfd5b11c135b5c83ce58c237e4e","modified":1607557505488},{"_id":"themes/cactus/source/images/favicon-16x16.png","hash":"c5acede0b27cad77f3526844a5f1144364fb5092","modified":1607557505519},{"_id":"themes/cactus/source/images/favicon-32x32.png","hash":"7e8f4cb8b628678c47b9fefddff7d22165610553","modified":1607557505551},{"_id":"themes/cactus/source/images/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1607557505580},{"_id":"source/CNAME","hash":"1af2a92f725a77e5456300d44510bed93343f85d","modified":1607560204728},{"_id":"source/robots.txt","hash":"c47ccf1a49c24cc5842430aa75c72ef491292412","modified":1607560211186},{"_id":"public/software-as-stitching/index.html","hash":"fee95625250dcf4be1943f9e35189907aea93ab4","modified":1607560366456},{"_id":"public/es6-arrow-functions/index.html","hash":"78c4c1c15f6d0083306a89cf9a2ca5a0181d5b44","modified":1607560366456},{"_id":"public/archives/index.html","hash":"ead3cf4caf9223b67c7886255111632b663d3bf4","modified":1607560366456},{"_id":"public/archives/2015/index.html","hash":"ea23b6214db09dc5ffd791cc6141375b83d9d20e","modified":1607560366456},{"_id":"public/archives/2015/09/index.html","hash":"5f25ba6c9bde8d2d08c030237385f5e30cd7bb44","modified":1607560366456},{"_id":"public/archives/2017/index.html","hash":"92403ca649af0a2f76b7d12de70191ddef35ca7e","modified":1607560366456},{"_id":"public/archives/2017/01/index.html","hash":"5b3ab5d1ad393ecbfa491071719f37174fd2cb49","modified":1607560366456},{"_id":"public/archives/2017/05/index.html","hash":"e97759dd81e3f4ec7eca536397dc2ed8d1ee16b3","modified":1607560366456},{"_id":"public/archives/2018/index.html","hash":"511f66e70e4ccebb4f102e2d6a9f1ae7e20efb7c","modified":1607560366456},{"_id":"public/archives/2018/12/index.html","hash":"2591809c364676949ef58d8da3d7f6838e5ffca1","modified":1607560366456},{"_id":"public/archives/2019/index.html","hash":"56e469367a3f2ffe03e019b1e403dfeb50e7e611","modified":1607560366456},{"_id":"public/archives/2019/11/index.html","hash":"639dc661b797e8e72257c11e3f049908f177f784","modified":1607560366456},{"_id":"public/archives/2020/index.html","hash":"d5e7f97e63c91469e2914083e4aabce3f9fc6ba7","modified":1607560366456},{"_id":"public/archives/2020/01/index.html","hash":"7e6f10b521b68ff6a4b66e95d767f8c1ed986f50","modified":1607560366456},{"_id":"public/archives/2020/05/index.html","hash":"f34bf7073a19e3cecd996aa9f2d7dd7fbf6adabf","modified":1607560366456},{"_id":"public/index.html","hash":"9b200a92e09c8d94bd2b26b0806716088a6ee845","modified":1607560366456},{"_id":"public/migrate-node-package-typescript-rollup/index.html","hash":"f5bb858a6529244991f69393f85f00f1b20621e8","modified":1607560366456},{"_id":"public/golang-and-interfaces-misuse/index.html","hash":"e7a769baee1bc09191b942fc0ae260194693347d","modified":1607560366456},{"_id":"public/typescript_jest_axios/index.html","hash":"e4a8e92f63617664bf92c0939f83989ad00043e8","modified":1607560366456},{"_id":"public/resilience-disyuntor-nodejs-circuit-breaker/index.html","hash":"862be37c8e83897b7adb0ae6c151f5dd81484b96","modified":1607560366456},{"_id":"public/redis-stunnel-and-c/index.html","hash":"e9b78fc0851fe0e4d2747b5ba73992215b487b13","modified":1607560366456},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1607560366456},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1607560366456},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1607560366456},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1607560366456},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1607560366456},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1607560366456},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1607560366456},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1607560366456},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1607560366456},{"_id":"public/images/favicon.ico","hash":"92d048c309d174191cd5041bc2088ae830292580","modified":1607560366456},{"_id":"public/images/favicon-192x192.png","hash":"eb11efc8fc69bed424f61c02af07a81f98d675b5","modified":1607560366456},{"_id":"public/images/apple-touch-icon.png","hash":"9210d9ed6cf2736c502f5d4fce1d27f3e49ef5f5","modified":1607560366456},{"_id":"public/images/logo.png","hash":"1cc0a39aeeeb1030963d597a0b64a8eeb0605c76","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1607560366456},{"_id":"public/images/favicon-16x16.png","hash":"c5acede0b27cad77f3526844a5f1144364fb5092","modified":1607560366456},{"_id":"public/images/favicon-32x32.png","hash":"7e8f4cb8b628678c47b9fefddff7d22165610553","modified":1607560366456},{"_id":"public/images/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1607560366456},{"_id":"public/CNAME","hash":"1af2a92f725a77e5456300d44510bed93343f85d","modified":1607560366456},{"_id":"public/images/android-chrome-192x192.png","hash":"eb11efc8fc69bed424f61c02af07a81f98d675b5","modified":1607560366456},{"_id":"public/robots.txt","hash":"c47ccf1a49c24cc5842430aa75c72ef491292412","modified":1607560366456},{"_id":"public/images/android-chrome-512x512.png","hash":"664c2cb6dce45bfd5b11c135b5c83ce58c237e4e","modified":1607560366456},{"_id":"public/software-as-stitching/stitching-3.jpg","hash":"073f1c5ee385c2f2a85bcff635679550a4d4f748","modified":1607560366456},{"_id":"public/redis-stunnel-and-c/cert-file.png","hash":"293c6443e12806911ef90d10003ac6f350fec72d","modified":1607560366456},{"_id":"public/redis-stunnel-and-c/redis-cli-result.png","hash":"13cfa18d9792ae2f5c86237e81d0549731a96b2b","modified":1607560366456},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1607560366456},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1607560366456},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1607560366456},{"_id":"public/redis-stunnel-and-c/import-cert.png","hash":"d4d4b7327e96b1477245d967fcb254e5a20900a9","modified":1607560366456},{"_id":"public/redis-stunnel-and-c/redis-ssl-start.png","hash":"c9f422efaa749c4515f14d05406a10dc5bdb0d43","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1607560366456},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1607560366456},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1607560366456},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1607560366456},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1607560366456},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1607560366456},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1607560366456},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1607560366456},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1607560366456},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1607560366456},{"_id":"public/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1607560366456},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1607560366456},{"_id":"public/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1607560366456},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1607560366456},{"_id":"public/css/style.css","hash":"5a9f94ab23084bcb1e1f069eb3ed6fa5b0b5b13a","modified":1607560366456},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1607560366456},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1607560366456},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1607560366456},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1607560366456},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1607560366456},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1607560366456},{"_id":"public/software-as-stitching/stitching-2.jpg","hash":"ed674638265165e49d86a6f8f9f8d7787266278b","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1607560366456},{"_id":"public/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1607560366456},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1607560366456},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1607560366456},{"_id":"public/software-as-stitching/stitching.jpg","hash":"81745741f3550a4bbae3db21e2c6f4c9277d63ff","modified":1607560366456}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Software as stitching","date":"2018-12-27T00:00:00.000Z","updated":"2018-12-27T00:00:00.000Z","_content":"\n![](./stitching-3.jpg)\n\n<sub><sup>Photo by Alexander Andrews on Unsplash</sup></sub> \n\nLately, I've been thinking that most of the software I've done consist of stitching of API's. Imagine you work on\nthe team that is in charge of handling payments. It doesn't matter if you're working on the front-end or the back-end,\nit usually goes like this:\n\n* We (the company you work for) have a new payment provider.\n* We must integrate with their API.\n* We must accommodate our business logic to their API.\n\nYou have to take consideration of several layers in between, this list includes but is not limited to: validation, logging, error handling, persistence, a source of truth, actual business logic. Almost everything becomes a cross-cutting concern, authentication, logging, caching; however, in the end, the hardest part is making sense or making an abstraction of\nthe new API to conform to the company business logic.\n\nThis is where my idea of stitching comes to mind; you don't know from the beginning how everything has to be laid out. Just as you stitch, you don't know for sure if the combination of API call is going to work as you're picturing it in your head.\n\n![](./stitching-2.jpg)\n<sub><sup>Photo by Dương Trần Quốc on Unsplash</sup></sub> \n\nI'm not saying that software stitching is easy, but it can become repetitive.\n\n![](./stitching-3.jpg)","source":"_posts/software-as-stitching.md","raw":"---\ntitle: Software as stitching\ndate: '2018-12-27'\nupdated: '2018-12-27'\n---\n\n![](./stitching-3.jpg)\n\n<sub><sup>Photo by Alexander Andrews on Unsplash</sup></sub> \n\nLately, I've been thinking that most of the software I've done consist of stitching of API's. Imagine you work on\nthe team that is in charge of handling payments. It doesn't matter if you're working on the front-end or the back-end,\nit usually goes like this:\n\n* We (the company you work for) have a new payment provider.\n* We must integrate with their API.\n* We must accommodate our business logic to their API.\n\nYou have to take consideration of several layers in between, this list includes but is not limited to: validation, logging, error handling, persistence, a source of truth, actual business logic. Almost everything becomes a cross-cutting concern, authentication, logging, caching; however, in the end, the hardest part is making sense or making an abstraction of\nthe new API to conform to the company business logic.\n\nThis is where my idea of stitching comes to mind; you don't know from the beginning how everything has to be laid out. Just as you stitch, you don't know for sure if the combination of API call is going to work as you're picturing it in your head.\n\n![](./stitching-2.jpg)\n<sub><sup>Photo by Dương Trần Quốc on Unsplash</sup></sub> \n\nI'm not saying that software stitching is easy, but it can become repetitive.\n\n![](./stitching-3.jpg)","slug":"software-as-stitching","published":1,"_id":"ckii1o4qs000107xyf5g40d5a","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"./stitching-3.jpg\"></p>\n<p><sub><sup>Photo by Alexander Andrews on Unsplash</sup></sub> </p>\n<p>Lately, I’ve been thinking that most of the software I’ve done consist of stitching of API’s. Imagine you work on<br>the team that is in charge of handling payments. It doesn’t matter if you’re working on the front-end or the back-end,<br>it usually goes like this:</p>\n<ul>\n<li>We (the company you work for) have a new payment provider.</li>\n<li>We must integrate with their API.</li>\n<li>We must accommodate our business logic to their API.</li>\n</ul>\n<p>You have to take consideration of several layers in between, this list includes but is not limited to: validation, logging, error handling, persistence, a source of truth, actual business logic. Almost everything becomes a cross-cutting concern, authentication, logging, caching; however, in the end, the hardest part is making sense or making an abstraction of<br>the new API to conform to the company business logic.</p>\n<p>This is where my idea of stitching comes to mind; you don’t know from the beginning how everything has to be laid out. Just as you stitch, you don’t know for sure if the combination of API call is going to work as you’re picturing it in your head.</p>\n<p><img src=\"./stitching-2.jpg\"><br><sub><sup>Photo by Dương Trần Quốc on Unsplash</sup></sub> </p>\n<p>I’m not saying that software stitching is easy, but it can become repetitive.</p>\n<p><img src=\"./stitching-3.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"./stitching-3.jpg\"></p>\n<p><sub><sup>Photo by Alexander Andrews on Unsplash</sup></sub> </p>\n<p>Lately, I’ve been thinking that most of the software I’ve done consist of stitching of API’s. Imagine you work on<br>the team that is in charge of handling payments. It doesn’t matter if you’re working on the front-end or the back-end,<br>it usually goes like this:</p>\n<ul>\n<li>We (the company you work for) have a new payment provider.</li>\n<li>We must integrate with their API.</li>\n<li>We must accommodate our business logic to their API.</li>\n</ul>\n<p>You have to take consideration of several layers in between, this list includes but is not limited to: validation, logging, error handling, persistence, a source of truth, actual business logic. Almost everything becomes a cross-cutting concern, authentication, logging, caching; however, in the end, the hardest part is making sense or making an abstraction of<br>the new API to conform to the company business logic.</p>\n<p>This is where my idea of stitching comes to mind; you don’t know from the beginning how everything has to be laid out. Just as you stitch, you don’t know for sure if the combination of API call is going to work as you’re picturing it in your head.</p>\n<p><img src=\"./stitching-2.jpg\"><br><sub><sup>Photo by Dương Trần Quốc on Unsplash</sup></sub> </p>\n<p>I’m not saying that software stitching is easy, but it can become repetitive.</p>\n<p><img src=\"./stitching-3.jpg\"></p>\n"},{"title":"Typescript, Jest and Axios","date":"2019-11-03T00:00:00.000Z","updated":"2019-11-03T00:00:00.000Z","_content":"\nI found different posts that tell you how to mock Axios using Jest & Typescript. The only difference in this post is that, when I use Axios, I like to use it as a function rather than calling `axios.get` or `axios.post`.\n\nImagine you have this Axios request that you want to mock in your tests:\n\n```typescript\n//src/index.ts\nimport axios from \"axios\";\n\nexport interface Post {\n userId: number;\n id: number;\n title: string;\n body: string;\n}\n\nconst DummyRequest = (id: number): Promise<Post> => {\n return axios({\n method: \"GET\",\n url: `https://jsonplaceholder.typicode.com/posts/${id}`\n }).then(response => {\n return { ...response.data };\n });\n};\n\nexport default DummyRequest;\n```\n\nInstall jest and jest-ts and initialize jest-ts\n\n```bash\n>npm i -D ts-jest jest\n>npx ts-jest config:init\n```\n\nThis last command will create a `jest.config.js` file:\n\n```js\n//jest.config.js\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n}\n```\n\nIn your tsconfig.json file, make **sure that your tests are excluded from the compiler**:\n\n```json\n//tsconfig.json\n...\n\"exclude\": [\n      \"test/**/*\" <--Add this to your exclude array\n ],\n...\n```\n\nNow we can create a test for our DummyRequest.ts, create this file under `test/index.test.ts`:\n\n```typescript\nimport axios, { AxiosResponse } from \"axios\";\nimport DummyRequest from \"../src\";\nimport { mocked } from \"ts-jest/dist/util/testing\"; //<-- This allows to mock results\n\njest.mock(\"axios\"); //This is needed to allow jest to modify axios at runtime\n\nit(\"returns a post\", async () => {\n  //Arrange\n  const axiosResponse: AxiosResponse = {\n    data: {\n    userId: 1,\n    id: 1,\n    title:\n    \"sunt aut facere repellat provident occaecati excepturi optioreprehenderit\",\n    body:\n    \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n    },\n    status: 200,\n    statusText: \"OK\",\n    config: {},\n    headers: {}\n  };\n\n  mocked(axios).mockResolvedValue(axiosResponse); //Mocking axios function rather than a method\n  \n  //Act\n  const result = await DummyRequest(1);\n\n  //Assert\n  expect(result).toBe({\n    userId: 1,\n    id: 1,\n    title:\n    \"sunt aut facere repellat provident occaecati excepturi optioreprehenderit\",\n    body:\n    \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n  });\n});\n```\n\nNow you can mock the whole Axios function rather than specific methods.","source":"_posts/typescript_jest_axios.md","raw":"---\ntitle: Typescript, Jest and Axios\ndate: '2019-11-03T00:00:00Z'\nupdated: '2019-11-03T00:00:00Z'\n---\n\nI found different posts that tell you how to mock Axios using Jest & Typescript. The only difference in this post is that, when I use Axios, I like to use it as a function rather than calling `axios.get` or `axios.post`.\n\nImagine you have this Axios request that you want to mock in your tests:\n\n```typescript\n//src/index.ts\nimport axios from \"axios\";\n\nexport interface Post {\n userId: number;\n id: number;\n title: string;\n body: string;\n}\n\nconst DummyRequest = (id: number): Promise<Post> => {\n return axios({\n method: \"GET\",\n url: `https://jsonplaceholder.typicode.com/posts/${id}`\n }).then(response => {\n return { ...response.data };\n });\n};\n\nexport default DummyRequest;\n```\n\nInstall jest and jest-ts and initialize jest-ts\n\n```bash\n>npm i -D ts-jest jest\n>npx ts-jest config:init\n```\n\nThis last command will create a `jest.config.js` file:\n\n```js\n//jest.config.js\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n}\n```\n\nIn your tsconfig.json file, make **sure that your tests are excluded from the compiler**:\n\n```json\n//tsconfig.json\n...\n\"exclude\": [\n      \"test/**/*\" <--Add this to your exclude array\n ],\n...\n```\n\nNow we can create a test for our DummyRequest.ts, create this file under `test/index.test.ts`:\n\n```typescript\nimport axios, { AxiosResponse } from \"axios\";\nimport DummyRequest from \"../src\";\nimport { mocked } from \"ts-jest/dist/util/testing\"; //<-- This allows to mock results\n\njest.mock(\"axios\"); //This is needed to allow jest to modify axios at runtime\n\nit(\"returns a post\", async () => {\n  //Arrange\n  const axiosResponse: AxiosResponse = {\n    data: {\n    userId: 1,\n    id: 1,\n    title:\n    \"sunt aut facere repellat provident occaecati excepturi optioreprehenderit\",\n    body:\n    \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n    },\n    status: 200,\n    statusText: \"OK\",\n    config: {},\n    headers: {}\n  };\n\n  mocked(axios).mockResolvedValue(axiosResponse); //Mocking axios function rather than a method\n  \n  //Act\n  const result = await DummyRequest(1);\n\n  //Assert\n  expect(result).toBe({\n    userId: 1,\n    id: 1,\n    title:\n    \"sunt aut facere repellat provident occaecati excepturi optioreprehenderit\",\n    body:\n    \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n  });\n});\n```\n\nNow you can mock the whole Axios function rather than specific methods.","slug":"typescript_jest_axios","published":1,"_id":"ckii1raaj00012jxycto0fue2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I found different posts that tell you how to mock Axios using Jest &amp; Typescript. The only difference in this post is that, when I use Axios, I like to use it as a function rather than calling <code>axios.get</code> or <code>axios.post</code>.</p>\n<p>Imagine you have this Axios request that you want to mock in your tests:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//src/index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Post &#123;</span><br><span class=\"line\"> userId: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"> id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"> title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> body: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> DummyRequest = (id: <span class=\"built_in\">number</span>): <span class=\"built_in\">Promise</span>&lt;Post&gt; =&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\"> method: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\"> url: <span class=\"string\">`https://jsonplaceholder.typicode.com/posts/<span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\"> &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123; ...response.data &#125;;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DummyRequest;</span><br></pre></td></tr></table></figure>\n\n<p>Install jest and jest-ts and initialize jest-ts</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;npm i -D ts-jest jest</span><br><span class=\"line\">&gt;npx ts-jest config:init</span><br></pre></td></tr></table></figure>\n\n<p>This last command will create a <code>jest.config.js</code> file:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jest.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  preset: <span class=\"string\">&#x27;ts-jest&#x27;</span>,</span><br><span class=\"line\">  testEnvironment: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In your tsconfig.json file, make <strong>sure that your tests are excluded from the compiler</strong>:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//tsconfig.json</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&quot;exclude&quot;: [</span><br><span class=\"line\">      &quot;test/**/*&quot; &lt;--Add this to your exclude array</span><br><span class=\"line\"> ],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>Now we can create a test for our DummyRequest.ts, create this file under <code>test/index.test.ts</code>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios, &#123; AxiosResponse &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> DummyRequest <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mocked &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;ts-jest/dist/util/testing&quot;</span>; <span class=\"comment\">//&lt;-- This allows to mock results</span></span><br><span class=\"line\"></span><br><span class=\"line\">jest.mock(<span class=\"string\">&quot;axios&quot;</span>); <span class=\"comment\">//This is needed to allow jest to modify axios at runtime</span></span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">&quot;returns a post&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">//Arrange</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> axiosResponse: AxiosResponse = &#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    userId: <span class=\"number\">1</span>,</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    title:</span><br><span class=\"line\">    <span class=\"string\">&quot;sunt aut facere repellat provident occaecati excepturi optioreprehenderit&quot;</span>,</span><br><span class=\"line\">    body:</span><br><span class=\"line\">    <span class=\"string\">&quot;quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    status: <span class=\"number\">200</span>,</span><br><span class=\"line\">    statusText: <span class=\"string\">&quot;OK&quot;</span>,</span><br><span class=\"line\">    config: &#123;&#125;,</span><br><span class=\"line\">    headers: &#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  mocked(axios).mockResolvedValue(axiosResponse); <span class=\"comment\">//Mocking axios function rather than a method</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//Act</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> DummyRequest(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//Assert</span></span><br><span class=\"line\">  expect(result).toBe(&#123;</span><br><span class=\"line\">    userId: <span class=\"number\">1</span>,</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    title:</span><br><span class=\"line\">    <span class=\"string\">&quot;sunt aut facere repellat provident occaecati excepturi optioreprehenderit&quot;</span>,</span><br><span class=\"line\">    body:</span><br><span class=\"line\">    <span class=\"string\">&quot;quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Now you can mock the whole Axios function rather than specific methods.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I found different posts that tell you how to mock Axios using Jest &amp; Typescript. The only difference in this post is that, when I use Axios, I like to use it as a function rather than calling <code>axios.get</code> or <code>axios.post</code>.</p>\n<p>Imagine you have this Axios request that you want to mock in your tests:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//src/index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Post &#123;</span><br><span class=\"line\"> userId: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"> id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"> title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> body: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> DummyRequest = (id: <span class=\"built_in\">number</span>): <span class=\"built_in\">Promise</span>&lt;Post&gt; =&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\"> method: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\"> url: <span class=\"string\">`https://jsonplaceholder.typicode.com/posts/<span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\"> &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123; ...response.data &#125;;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DummyRequest;</span><br></pre></td></tr></table></figure>\n\n<p>Install jest and jest-ts and initialize jest-ts</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;npm i -D ts-jest jest</span><br><span class=\"line\">&gt;npx ts-jest config:init</span><br></pre></td></tr></table></figure>\n\n<p>This last command will create a <code>jest.config.js</code> file:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jest.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  preset: <span class=\"string\">&#x27;ts-jest&#x27;</span>,</span><br><span class=\"line\">  testEnvironment: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In your tsconfig.json file, make <strong>sure that your tests are excluded from the compiler</strong>:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//tsconfig.json</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&quot;exclude&quot;: [</span><br><span class=\"line\">      &quot;test/**/*&quot; &lt;--Add this to your exclude array</span><br><span class=\"line\"> ],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>Now we can create a test for our DummyRequest.ts, create this file under <code>test/index.test.ts</code>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios, &#123; AxiosResponse &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> DummyRequest <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mocked &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;ts-jest/dist/util/testing&quot;</span>; <span class=\"comment\">//&lt;-- This allows to mock results</span></span><br><span class=\"line\"></span><br><span class=\"line\">jest.mock(<span class=\"string\">&quot;axios&quot;</span>); <span class=\"comment\">//This is needed to allow jest to modify axios at runtime</span></span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">&quot;returns a post&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">//Arrange</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> axiosResponse: AxiosResponse = &#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    userId: <span class=\"number\">1</span>,</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    title:</span><br><span class=\"line\">    <span class=\"string\">&quot;sunt aut facere repellat provident occaecati excepturi optioreprehenderit&quot;</span>,</span><br><span class=\"line\">    body:</span><br><span class=\"line\">    <span class=\"string\">&quot;quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    status: <span class=\"number\">200</span>,</span><br><span class=\"line\">    statusText: <span class=\"string\">&quot;OK&quot;</span>,</span><br><span class=\"line\">    config: &#123;&#125;,</span><br><span class=\"line\">    headers: &#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  mocked(axios).mockResolvedValue(axiosResponse); <span class=\"comment\">//Mocking axios function rather than a method</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//Act</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> DummyRequest(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//Assert</span></span><br><span class=\"line\">  expect(result).toBe(&#123;</span><br><span class=\"line\">    userId: <span class=\"number\">1</span>,</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    title:</span><br><span class=\"line\">    <span class=\"string\">&quot;sunt aut facere repellat provident occaecati excepturi optioreprehenderit&quot;</span>,</span><br><span class=\"line\">    body:</span><br><span class=\"line\">    <span class=\"string\">&quot;quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Now you can mock the whole Axios function rather than specific methods.</p>\n"},{"title":"Resilience with Disyuntor - Circuit Breaker","date":"2017-05-27T00:00:00.000Z","updated":"2017-05-27T00:00:00.000Z","_content":"\nResilience means the capacity to recover quickly from difficulties. Circuit breaker pattern is a good practice for resilience.\n\n\nWhen working with distributed systems, you want resilience. If you're working with \"micro-services,\" \nyou probably have faced with the problem of a service going down. When X service goes down, and Y and Z depend on X, \nevery internal exception could potentially start taking other services down. \n\nIf you don't work with micro-services, you might still have an integration with a payment provider \n(PayPal, Stripe, Google Play, etc.). What happens when any of those providers goes down? \nImagine a request comes to your internal service, then your service makes a request to Stripe, \nthen Stripe takes 30 seconds to tell you there was something wrong. How many requests have \nqueued up in 30 seconds in your service?\n\nCircuit Breaker is a pattern that can help you with this problem. The Circuit Breaker pattern \nbecame famous after Release It! book. To be honest the first time I heard about this \npatterns was in 2011 on Dependency Injection in .NET.\n\n> \"Circuit Breaker is a stability pattern because it adds robustness to an application by failing \nfast, instead of hanging and consuming resources while it hangs. This is a good example of a nonfunctional \nrequirement and a true CROSS-CUTTING CONCERN, because it has little to do with the feature implemented with the out-of-process call.\"\n\n>Excerpt From: Mark Seemann. \"Dependency Injection in .NET.\" 2011\n\n_\n\n> \"Residential fuses have gone the way of the rotary dial telephone. Now, circuit breakers \nprotect overeager gadget hounds from burning their houses down. The principle is the same: \ndetect excess usage, fail first, and open the circuit. More abstractly, the circuit breaker exists \nto allow one subsystem (an electrical circuit) to fail (excessive current draw, possibly from a \nshort-circuit) without destroying the entire system (the house). Furthermore, once the danger has \npassed, the circuit breaker can be reset to restore full function to the system.\"\n\n>Excerpt From: Michael T. Nygard. \"Release It!\" 2007\n\nThere are three states on a Circuit Breaker implementation:\n\n* Open\n* Half-Open\n* Closed\n\nThe closed state represents a healthy system. Going back to the Stripe example, \nthe closed state means requests come and go without the known existence of a Circuit breaker.\n\nCircuit breaker takes passive action when that HTTP call fails. On every failure, \nthe circuit breaker is listening for failures. The Circuit Breaker opens when the \nthreshold of failures, or rate of failures, is met.\n\nOnce the circuit breaker is open, every HTTP call will fail immediately, bypassing \nthe real call to Stripe. After a pre-defined period, the Circuit Breaker tries a \nreal call to Stripe, leaving the Circuit Breaker on a half-open state. \n\nOn a half-open state, if the request to Stripe succeeds, the Circuit Breaker returns \nto a closed state, if it fails it returns to an open state.\n\nUsually, an open state call is a custom exception. When using a Circuit Breaker \nimplementation, make sure you log and monitor this kind of exceptions.\n\n## Disyuntor\n[Disyuntor](https://github.com/auth0/disyuntor) is an implementation of Circuit Breaker in Node.js by [Auth0](https://auth0.com/). This npm package lets you wrap a critical function in a Circuit Breaker pattern.\n\nIn this tutorial, you will create two services. One of them will be flaky for a deterministic \nperiod. The other will issue requests.\n\nAfter that, we will add Disyuntor and wrap the call in a Circuit Breaker pattern. You will see the three states in action.\n\n### Pre-requisites\nThis is a Node.js tutorial, but also I will use yarn to install packages. Whenever you see `yarn add --exact {package}` can\nbe replace with `npm install --exact {package}`. Also I'm doing this in macOS Sierra, so this is a *nix OS. I will try my \nbest to make it cross-platform.\n\nLet's create a new project, open up your console and type:\n\n```\n$> mkdir disyuntor-example && cd $_\n$disyuntor-example> yarn init -y #or npm init -y\n```\n\nWe will use Express.js to mock out our two services:\n\n```\n$disyuntor-example> yarn add --exact express\n```\n\nCreate the flaky server first: \n\n```js\n// flaky.js\nconst app = require('express')();\n\napp.get('/:id', (req, res, next) => {\n  var param = req.params.id;\n  if (param === \"0\") {\n    blockFor(5);\n    res.sendStatus(503);\n  } else {\n    res.status(200).send('I am ok now.');\n  }\n});\n\nfunction blockFor(seconds) {\n  var waitTill = new Date(new Date().getTime() + seconds * 1000);\n  while(waitTill > new Date()){}\n}\n\napp.listen(3000, () => console.log('Flaky app is listening on port 3000'));\n```\n\nFor the sake of this tutorial you will use a simple parameter to control if the server is flaky or not. You will notice the function `blockFor(seconds)`, this was added to simulate a service that takes time to return.\n\nBefore creating the other service, you need to add npm packages to create http request to the flaky service. Also you will add a helper package to run both services from a single command:\n\n```bash\n$disyuntor-example> yarn add --exact got bluebird concurrently\n```\n\nNow let's create our consumer service:\n\n```js\n// consumer.js\nconst app     = require('express')();\nconst got     = require('got');\n\napp.get('/:id', (req, res, next) => {\n  return got(`http://localhost:3000/${req.params.id}`)\n    .then(() => {\n      res.sendStatus(200);\n    })\n    .catch(() => {\n      res.sendStatus(503);\n    });\n});\n\napp.listen(4000, () => console.log('Consumer service is listening on port 4000'));\n```\n\nAs a final step add a `start` under `scripts` into your `package.json`:\n\n```json\n...\n\"scripts\": {\n  \"start\": \"concurrently \\\"node flaky\\\" \\\"node consumer\\\" \"\n},\n...\n```\n\nGoing back to your terminal window, you can type:\n\n```bash\n$disyuntor-example> npm start\n> concurrently \"node flaky\" \"node consumer\"\n\n[0] Flaky app is listening on port 3000\n[1] Consumer service is listening on port 4000\n```\n\nBoth services are running, now in a different terminal window you can make a Curl request:\n\n```bash\n$disyuntor-example> curl -I http://localhost:4000/1\nHTTP/1.1 200 OK\nX-Powered-By: Express\nContent-Type: text/plain; charset=utf-8\nContent-Length: 2\nETag: W/\"2-nOO9QiTIwXgNtWtBJezz8kv3SLc\"\nConnection: keep-alive\n\n```\n\nNow try to do a request that you know it will return 503:\n\n```bash\n$disyuntor-example> curl -I http://localhost:4000/0\nHTTP/1.1 503 Service Unavailable\nX-Powered-By: Express\nContent-Type: text/plain; charset=utf-8\nContent-Length: 19\nETag: W/\"13-/70LdyMNgL+PAJa+Q/RtnRF82z8\"\nDate: Sun, 28 May 2017 14:26:29 GMT\nConnection: keep-alive\n```\n\nNow imagine this is a production setup. Your flaky service is an internal service that has gone down. Your public service start swamping with requests your internal service. After a while your public service becomes unresponsive. \n\nYou can even reproduce that scenario with this command:\n\n```bash\n$disyuntor-example> curl -I http://localhost:4000/0 && curl -I http://localhost:4000/0 && curl -I http://localhost:4000/0\n```\n\nYou will notice that takes more than 10 seconds to finish all the requests.\n\nYou can stop both services by pressing Ctrl+C.\n\nLet's add Disyuntor to circuit break this requests:\n\n```bash\n$disyuntor-example> yarn add --exact disyuntor\n```\n\nModify your consumer service:\n\n```js\nconst app       = require('express')();\nconst got       = require('got');\nconst disyuntor = require('disyuntor');\n\nconst safeGot = disyuntor.promise(got, {\n  name: 'got.request',\n  timeout: '10s',\n  cooldown: '5s',\n  maxFailures: 1,\n  onTrip: (err, failures, cooldown) => console.log(`got.request triped because it failed ${failures} times. Last error was ${err.message}! There will be no more attempts for ${cooldown}ms`)\n});\n\napp.get('/:id', (req, res, next) => {\n  return safeGot(`http://localhost:3000/${req.params.id}`)\n    .then(() => {\n      res.sendStatus(200);\n    })\n    .catch(() => {\n      res.sendStatus(500);\n    });\n});\n\napp.listen(4000, () => console.log('Consumer service is listening on port 4000'));\n```\n\nStart both services again with `npm start`. Start sending requests with curl:\n\n```bash\n$disyuntor-example> curl -I http://localhost:4000/0\n```\n\nYou will see this message where you started your services:\n\n```bash\n[1] got.request triped because it failed 1 times. Last error was Response code 503 (Ser\nvice Unavailable)! There will be no more attempts for 5000ms\n```\n\nLet's try this:\n\n```bash\n$disyuntor-example> curl -I http://localhost:4000/0 && curl -I http://localhost:4000/0 && curl -I http://localhost:4000/0\n```\n\nYou will notice that the first request takes the expected 5 seconds but subsequent request fail immediatedly. This is the Circuit Breaker pattern in action. \n\nAfter the first failure, the circuit becomes open. Then after the _cooldown_ period the circuit becomes half-open. If we issue another request after 5 seconds, you will see that it tries again to contact the flaky service.\n\n## Conclusion\n\nWhen working with multiple external services -- either a Db or http service -- a good resilience practice is to add a circuit breaker.\n\nDisyuntor is a good circuit breaker library, it lacks of some features, but it gets the work done. \n","source":"_posts/resilience-disyuntor-nodejs-circuit-breaker.md","raw":"---\ntitle: Resilience with Disyuntor - Circuit Breaker\ndate: '2017-05-27'\nupdated: '2017-05-27'\n---\n\nResilience means the capacity to recover quickly from difficulties. Circuit breaker pattern is a good practice for resilience.\n\n\nWhen working with distributed systems, you want resilience. If you're working with \"micro-services,\" \nyou probably have faced with the problem of a service going down. When X service goes down, and Y and Z depend on X, \nevery internal exception could potentially start taking other services down. \n\nIf you don't work with micro-services, you might still have an integration with a payment provider \n(PayPal, Stripe, Google Play, etc.). What happens when any of those providers goes down? \nImagine a request comes to your internal service, then your service makes a request to Stripe, \nthen Stripe takes 30 seconds to tell you there was something wrong. How many requests have \nqueued up in 30 seconds in your service?\n\nCircuit Breaker is a pattern that can help you with this problem. The Circuit Breaker pattern \nbecame famous after Release It! book. To be honest the first time I heard about this \npatterns was in 2011 on Dependency Injection in .NET.\n\n> \"Circuit Breaker is a stability pattern because it adds robustness to an application by failing \nfast, instead of hanging and consuming resources while it hangs. This is a good example of a nonfunctional \nrequirement and a true CROSS-CUTTING CONCERN, because it has little to do with the feature implemented with the out-of-process call.\"\n\n>Excerpt From: Mark Seemann. \"Dependency Injection in .NET.\" 2011\n\n_\n\n> \"Residential fuses have gone the way of the rotary dial telephone. Now, circuit breakers \nprotect overeager gadget hounds from burning their houses down. The principle is the same: \ndetect excess usage, fail first, and open the circuit. More abstractly, the circuit breaker exists \nto allow one subsystem (an electrical circuit) to fail (excessive current draw, possibly from a \nshort-circuit) without destroying the entire system (the house). Furthermore, once the danger has \npassed, the circuit breaker can be reset to restore full function to the system.\"\n\n>Excerpt From: Michael T. Nygard. \"Release It!\" 2007\n\nThere are three states on a Circuit Breaker implementation:\n\n* Open\n* Half-Open\n* Closed\n\nThe closed state represents a healthy system. Going back to the Stripe example, \nthe closed state means requests come and go without the known existence of a Circuit breaker.\n\nCircuit breaker takes passive action when that HTTP call fails. On every failure, \nthe circuit breaker is listening for failures. The Circuit Breaker opens when the \nthreshold of failures, or rate of failures, is met.\n\nOnce the circuit breaker is open, every HTTP call will fail immediately, bypassing \nthe real call to Stripe. After a pre-defined period, the Circuit Breaker tries a \nreal call to Stripe, leaving the Circuit Breaker on a half-open state. \n\nOn a half-open state, if the request to Stripe succeeds, the Circuit Breaker returns \nto a closed state, if it fails it returns to an open state.\n\nUsually, an open state call is a custom exception. When using a Circuit Breaker \nimplementation, make sure you log and monitor this kind of exceptions.\n\n## Disyuntor\n[Disyuntor](https://github.com/auth0/disyuntor) is an implementation of Circuit Breaker in Node.js by [Auth0](https://auth0.com/). This npm package lets you wrap a critical function in a Circuit Breaker pattern.\n\nIn this tutorial, you will create two services. One of them will be flaky for a deterministic \nperiod. The other will issue requests.\n\nAfter that, we will add Disyuntor and wrap the call in a Circuit Breaker pattern. You will see the three states in action.\n\n### Pre-requisites\nThis is a Node.js tutorial, but also I will use yarn to install packages. Whenever you see `yarn add --exact {package}` can\nbe replace with `npm install --exact {package}`. Also I'm doing this in macOS Sierra, so this is a *nix OS. I will try my \nbest to make it cross-platform.\n\nLet's create a new project, open up your console and type:\n\n```\n$> mkdir disyuntor-example && cd $_\n$disyuntor-example> yarn init -y #or npm init -y\n```\n\nWe will use Express.js to mock out our two services:\n\n```\n$disyuntor-example> yarn add --exact express\n```\n\nCreate the flaky server first: \n\n```js\n// flaky.js\nconst app = require('express')();\n\napp.get('/:id', (req, res, next) => {\n  var param = req.params.id;\n  if (param === \"0\") {\n    blockFor(5);\n    res.sendStatus(503);\n  } else {\n    res.status(200).send('I am ok now.');\n  }\n});\n\nfunction blockFor(seconds) {\n  var waitTill = new Date(new Date().getTime() + seconds * 1000);\n  while(waitTill > new Date()){}\n}\n\napp.listen(3000, () => console.log('Flaky app is listening on port 3000'));\n```\n\nFor the sake of this tutorial you will use a simple parameter to control if the server is flaky or not. You will notice the function `blockFor(seconds)`, this was added to simulate a service that takes time to return.\n\nBefore creating the other service, you need to add npm packages to create http request to the flaky service. Also you will add a helper package to run both services from a single command:\n\n```bash\n$disyuntor-example> yarn add --exact got bluebird concurrently\n```\n\nNow let's create our consumer service:\n\n```js\n// consumer.js\nconst app     = require('express')();\nconst got     = require('got');\n\napp.get('/:id', (req, res, next) => {\n  return got(`http://localhost:3000/${req.params.id}`)\n    .then(() => {\n      res.sendStatus(200);\n    })\n    .catch(() => {\n      res.sendStatus(503);\n    });\n});\n\napp.listen(4000, () => console.log('Consumer service is listening on port 4000'));\n```\n\nAs a final step add a `start` under `scripts` into your `package.json`:\n\n```json\n...\n\"scripts\": {\n  \"start\": \"concurrently \\\"node flaky\\\" \\\"node consumer\\\" \"\n},\n...\n```\n\nGoing back to your terminal window, you can type:\n\n```bash\n$disyuntor-example> npm start\n> concurrently \"node flaky\" \"node consumer\"\n\n[0] Flaky app is listening on port 3000\n[1] Consumer service is listening on port 4000\n```\n\nBoth services are running, now in a different terminal window you can make a Curl request:\n\n```bash\n$disyuntor-example> curl -I http://localhost:4000/1\nHTTP/1.1 200 OK\nX-Powered-By: Express\nContent-Type: text/plain; charset=utf-8\nContent-Length: 2\nETag: W/\"2-nOO9QiTIwXgNtWtBJezz8kv3SLc\"\nConnection: keep-alive\n\n```\n\nNow try to do a request that you know it will return 503:\n\n```bash\n$disyuntor-example> curl -I http://localhost:4000/0\nHTTP/1.1 503 Service Unavailable\nX-Powered-By: Express\nContent-Type: text/plain; charset=utf-8\nContent-Length: 19\nETag: W/\"13-/70LdyMNgL+PAJa+Q/RtnRF82z8\"\nDate: Sun, 28 May 2017 14:26:29 GMT\nConnection: keep-alive\n```\n\nNow imagine this is a production setup. Your flaky service is an internal service that has gone down. Your public service start swamping with requests your internal service. After a while your public service becomes unresponsive. \n\nYou can even reproduce that scenario with this command:\n\n```bash\n$disyuntor-example> curl -I http://localhost:4000/0 && curl -I http://localhost:4000/0 && curl -I http://localhost:4000/0\n```\n\nYou will notice that takes more than 10 seconds to finish all the requests.\n\nYou can stop both services by pressing Ctrl+C.\n\nLet's add Disyuntor to circuit break this requests:\n\n```bash\n$disyuntor-example> yarn add --exact disyuntor\n```\n\nModify your consumer service:\n\n```js\nconst app       = require('express')();\nconst got       = require('got');\nconst disyuntor = require('disyuntor');\n\nconst safeGot = disyuntor.promise(got, {\n  name: 'got.request',\n  timeout: '10s',\n  cooldown: '5s',\n  maxFailures: 1,\n  onTrip: (err, failures, cooldown) => console.log(`got.request triped because it failed ${failures} times. Last error was ${err.message}! There will be no more attempts for ${cooldown}ms`)\n});\n\napp.get('/:id', (req, res, next) => {\n  return safeGot(`http://localhost:3000/${req.params.id}`)\n    .then(() => {\n      res.sendStatus(200);\n    })\n    .catch(() => {\n      res.sendStatus(500);\n    });\n});\n\napp.listen(4000, () => console.log('Consumer service is listening on port 4000'));\n```\n\nStart both services again with `npm start`. Start sending requests with curl:\n\n```bash\n$disyuntor-example> curl -I http://localhost:4000/0\n```\n\nYou will see this message where you started your services:\n\n```bash\n[1] got.request triped because it failed 1 times. Last error was Response code 503 (Ser\nvice Unavailable)! There will be no more attempts for 5000ms\n```\n\nLet's try this:\n\n```bash\n$disyuntor-example> curl -I http://localhost:4000/0 && curl -I http://localhost:4000/0 && curl -I http://localhost:4000/0\n```\n\nYou will notice that the first request takes the expected 5 seconds but subsequent request fail immediatedly. This is the Circuit Breaker pattern in action. \n\nAfter the first failure, the circuit becomes open. Then after the _cooldown_ period the circuit becomes half-open. If we issue another request after 5 seconds, you will see that it tries again to contact the flaky service.\n\n## Conclusion\n\nWhen working with multiple external services -- either a Db or http service -- a good resilience practice is to add a circuit breaker.\n\nDisyuntor is a good circuit breaker library, it lacks of some features, but it gets the work done. \n","slug":"resilience-disyuntor-nodejs-circuit-breaker","published":1,"_id":"ckii1rksf00032jxy0ijchz4o","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Resilience means the capacity to recover quickly from difficulties. Circuit breaker pattern is a good practice for resilience.</p>\n<p>When working with distributed systems, you want resilience. If you’re working with “micro-services,”<br>you probably have faced with the problem of a service going down. When X service goes down, and Y and Z depend on X,<br>every internal exception could potentially start taking other services down. </p>\n<p>If you don’t work with micro-services, you might still have an integration with a payment provider<br>(PayPal, Stripe, Google Play, etc.). What happens when any of those providers goes down?<br>Imagine a request comes to your internal service, then your service makes a request to Stripe,<br>then Stripe takes 30 seconds to tell you there was something wrong. How many requests have<br>queued up in 30 seconds in your service?</p>\n<p>Circuit Breaker is a pattern that can help you with this problem. The Circuit Breaker pattern<br>became famous after Release It! book. To be honest the first time I heard about this<br>patterns was in 2011 on Dependency Injection in .NET.</p>\n<blockquote>\n<p>“Circuit Breaker is a stability pattern because it adds robustness to an application by failing<br>fast, instead of hanging and consuming resources while it hangs. This is a good example of a nonfunctional<br>requirement and a true CROSS-CUTTING CONCERN, because it has little to do with the feature implemented with the out-of-process call.”</p>\n</blockquote>\n<blockquote>\n<p>Excerpt From: Mark Seemann. “Dependency Injection in .NET.” 2011</p>\n</blockquote>\n<p>_</p>\n<blockquote>\n<p>“Residential fuses have gone the way of the rotary dial telephone. Now, circuit breakers<br>protect overeager gadget hounds from burning their houses down. The principle is the same:<br>detect excess usage, fail first, and open the circuit. More abstractly, the circuit breaker exists<br>to allow one subsystem (an electrical circuit) to fail (excessive current draw, possibly from a<br>short-circuit) without destroying the entire system (the house). Furthermore, once the danger has<br>passed, the circuit breaker can be reset to restore full function to the system.”</p>\n</blockquote>\n<blockquote>\n<p>Excerpt From: Michael T. Nygard. “Release It!” 2007</p>\n</blockquote>\n<p>There are three states on a Circuit Breaker implementation:</p>\n<ul>\n<li>Open</li>\n<li>Half-Open</li>\n<li>Closed</li>\n</ul>\n<p>The closed state represents a healthy system. Going back to the Stripe example,<br>the closed state means requests come and go without the known existence of a Circuit breaker.</p>\n<p>Circuit breaker takes passive action when that HTTP call fails. On every failure,<br>the circuit breaker is listening for failures. The Circuit Breaker opens when the<br>threshold of failures, or rate of failures, is met.</p>\n<p>Once the circuit breaker is open, every HTTP call will fail immediately, bypassing<br>the real call to Stripe. After a pre-defined period, the Circuit Breaker tries a<br>real call to Stripe, leaving the Circuit Breaker on a half-open state. </p>\n<p>On a half-open state, if the request to Stripe succeeds, the Circuit Breaker returns<br>to a closed state, if it fails it returns to an open state.</p>\n<p>Usually, an open state call is a custom exception. When using a Circuit Breaker<br>implementation, make sure you log and monitor this kind of exceptions.</p>\n<h2 id=\"Disyuntor\"><a href=\"#Disyuntor\" class=\"headerlink\" title=\"Disyuntor\"></a>Disyuntor</h2><p><a href=\"https://github.com/auth0/disyuntor\">Disyuntor</a> is an implementation of Circuit Breaker in Node.js by <a href=\"https://auth0.com/\">Auth0</a>. This npm package lets you wrap a critical function in a Circuit Breaker pattern.</p>\n<p>In this tutorial, you will create two services. One of them will be flaky for a deterministic<br>period. The other will issue requests.</p>\n<p>After that, we will add Disyuntor and wrap the call in a Circuit Breaker pattern. You will see the three states in action.</p>\n<h3 id=\"Pre-requisites\"><a href=\"#Pre-requisites\" class=\"headerlink\" title=\"Pre-requisites\"></a>Pre-requisites</h3><p>This is a Node.js tutorial, but also I will use yarn to install packages. Whenever you see <code>yarn add --exact &#123;package&#125;</code> can<br>be replace with <code>npm install --exact &#123;package&#125;</code>. Also I’m doing this in macOS Sierra, so this is a *nix OS. I will try my<br>best to make it cross-platform.</p>\n<p>Let’s create a new project, open up your console and type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; mkdir disyuntor-example &amp;&amp; cd $_</span><br><span class=\"line\">$disyuntor-example&gt; yarn init -y #or npm init -y</span><br></pre></td></tr></table></figure>\n\n<p>We will use Express.js to mock out our two services:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$disyuntor-example&gt; yarn add --exact express</span><br></pre></td></tr></table></figure>\n\n<p>Create the flaky server first: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// flaky.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/:id&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> param = req.params.id;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (param === <span class=\"string\">&quot;0&quot;</span>) &#123;</span><br><span class=\"line\">    blockFor(<span class=\"number\">5</span>);</span><br><span class=\"line\">    res.sendStatus(<span class=\"number\">503</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">200</span>).send(<span class=\"string\">&#x27;I am ok now.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">blockFor</span>(<span class=\"params\">seconds</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> waitTill = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + seconds * <span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(waitTill &gt; <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Flaky app is listening on port 3000&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>For the sake of this tutorial you will use a simple parameter to control if the server is flaky or not. You will notice the function <code>blockFor(seconds)</code>, this was added to simulate a service that takes time to return.</p>\n<p>Before creating the other service, you need to add npm packages to create http request to the flaky service. Also you will add a helper package to run both services from a single command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; yarn add --exact got bluebird concurrently</span><br></pre></td></tr></table></figure>\n\n<p>Now let’s create our consumer service:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// consumer.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app     = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> got     = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;got&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/:id&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> got(<span class=\"string\">`http://localhost:3000/<span class=\"subst\">$&#123;req.params.id&#125;</span>`</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      res.sendStatus(<span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      res.sendStatus(<span class=\"number\">503</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">4000</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Consumer service is listening on port 4000&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>As a final step add a <code>start</code> under <code>scripts</code> into your <code>package.json</code>:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;start&quot;: &quot;concurrently \\&quot;node flaky\\&quot; \\&quot;node consumer\\&quot; &quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>Going back to your terminal window, you can type:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; npm start</span><br><span class=\"line\">&gt; concurrently <span class=\"string\">&quot;node flaky&quot;</span> <span class=\"string\">&quot;node consumer&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[0] Flaky app is listening on port 3000</span><br><span class=\"line\">[1] Consumer service is listening on port 4000</span><br></pre></td></tr></table></figure>\n\n<p>Both services are running, now in a different terminal window you can make a Curl request:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; curl -I http://localhost:4000/1</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">X-Powered-By: Express</span><br><span class=\"line\">Content-Type: text/plain; charset=utf-8</span><br><span class=\"line\">Content-Length: 2</span><br><span class=\"line\">ETag: W/<span class=\"string\">&quot;2-nOO9QiTIwXgNtWtBJezz8kv3SLc&quot;</span></span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Now try to do a request that you know it will return 503:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; curl -I http://localhost:4000/0</span><br><span class=\"line\">HTTP/1.1 503 Service Unavailable</span><br><span class=\"line\">X-Powered-By: Express</span><br><span class=\"line\">Content-Type: text/plain; charset=utf-8</span><br><span class=\"line\">Content-Length: 19</span><br><span class=\"line\">ETag: W/<span class=\"string\">&quot;13-/70LdyMNgL+PAJa+Q/RtnRF82z8&quot;</span></span><br><span class=\"line\">Date: Sun, 28 May 2017 14:26:29 GMT</span><br><span class=\"line\">Connection: keep-alive</span><br></pre></td></tr></table></figure>\n\n<p>Now imagine this is a production setup. Your flaky service is an internal service that has gone down. Your public service start swamping with requests your internal service. After a while your public service becomes unresponsive. </p>\n<p>You can even reproduce that scenario with this command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; curl -I http://localhost:4000/0 &amp;&amp; curl -I http://localhost:4000/0 &amp;&amp; curl -I http://localhost:4000/0</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that takes more than 10 seconds to finish all the requests.</p>\n<p>You can stop both services by pressing Ctrl+C.</p>\n<p>Let’s add Disyuntor to circuit break this requests:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; yarn add --exact disyuntor</span><br></pre></td></tr></table></figure>\n\n<p>Modify your consumer service:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app       = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> got       = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;got&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> disyuntor = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;disyuntor&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> safeGot = disyuntor.promise(got, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;got.request&#x27;</span>,</span><br><span class=\"line\">  timeout: <span class=\"string\">&#x27;10s&#x27;</span>,</span><br><span class=\"line\">  cooldown: <span class=\"string\">&#x27;5s&#x27;</span>,</span><br><span class=\"line\">  maxFailures: <span class=\"number\">1</span>,</span><br><span class=\"line\">  onTrip: <span class=\"function\">(<span class=\"params\">err, failures, cooldown</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`got.request triped because it failed <span class=\"subst\">$&#123;failures&#125;</span> times. Last error was <span class=\"subst\">$&#123;err.message&#125;</span>! There will be no more attempts for <span class=\"subst\">$&#123;cooldown&#125;</span>ms`</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/:id&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> safeGot(<span class=\"string\">`http://localhost:3000/<span class=\"subst\">$&#123;req.params.id&#125;</span>`</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      res.sendStatus(<span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      res.sendStatus(<span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">4000</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Consumer service is listening on port 4000&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>Start both services again with <code>npm start</code>. Start sending requests with curl:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; curl -I http://localhost:4000/0</span><br></pre></td></tr></table></figure>\n\n<p>You will see this message where you started your services:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1] got.request triped because it failed 1 <span class=\"built_in\">times</span>. Last error was Response code 503 (Ser</span><br><span class=\"line\">vice Unavailable)! There will be no more attempts <span class=\"keyword\">for</span> 5000ms</span><br></pre></td></tr></table></figure>\n\n<p>Let’s try this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; curl -I http://localhost:4000/0 &amp;&amp; curl -I http://localhost:4000/0 &amp;&amp; curl -I http://localhost:4000/0</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that the first request takes the expected 5 seconds but subsequent request fail immediatedly. This is the Circuit Breaker pattern in action. </p>\n<p>After the first failure, the circuit becomes open. Then after the <em>cooldown</em> period the circuit becomes half-open. If we issue another request after 5 seconds, you will see that it tries again to contact the flaky service.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>When working with multiple external services – either a Db or http service – a good resilience practice is to add a circuit breaker.</p>\n<p>Disyuntor is a good circuit breaker library, it lacks of some features, but it gets the work done. </p>\n","site":{"data":{}},"excerpt":"","more":"<p>Resilience means the capacity to recover quickly from difficulties. Circuit breaker pattern is a good practice for resilience.</p>\n<p>When working with distributed systems, you want resilience. If you’re working with “micro-services,”<br>you probably have faced with the problem of a service going down. When X service goes down, and Y and Z depend on X,<br>every internal exception could potentially start taking other services down. </p>\n<p>If you don’t work with micro-services, you might still have an integration with a payment provider<br>(PayPal, Stripe, Google Play, etc.). What happens when any of those providers goes down?<br>Imagine a request comes to your internal service, then your service makes a request to Stripe,<br>then Stripe takes 30 seconds to tell you there was something wrong. How many requests have<br>queued up in 30 seconds in your service?</p>\n<p>Circuit Breaker is a pattern that can help you with this problem. The Circuit Breaker pattern<br>became famous after Release It! book. To be honest the first time I heard about this<br>patterns was in 2011 on Dependency Injection in .NET.</p>\n<blockquote>\n<p>“Circuit Breaker is a stability pattern because it adds robustness to an application by failing<br>fast, instead of hanging and consuming resources while it hangs. This is a good example of a nonfunctional<br>requirement and a true CROSS-CUTTING CONCERN, because it has little to do with the feature implemented with the out-of-process call.”</p>\n</blockquote>\n<blockquote>\n<p>Excerpt From: Mark Seemann. “Dependency Injection in .NET.” 2011</p>\n</blockquote>\n<p>_</p>\n<blockquote>\n<p>“Residential fuses have gone the way of the rotary dial telephone. Now, circuit breakers<br>protect overeager gadget hounds from burning their houses down. The principle is the same:<br>detect excess usage, fail first, and open the circuit. More abstractly, the circuit breaker exists<br>to allow one subsystem (an electrical circuit) to fail (excessive current draw, possibly from a<br>short-circuit) without destroying the entire system (the house). Furthermore, once the danger has<br>passed, the circuit breaker can be reset to restore full function to the system.”</p>\n</blockquote>\n<blockquote>\n<p>Excerpt From: Michael T. Nygard. “Release It!” 2007</p>\n</blockquote>\n<p>There are three states on a Circuit Breaker implementation:</p>\n<ul>\n<li>Open</li>\n<li>Half-Open</li>\n<li>Closed</li>\n</ul>\n<p>The closed state represents a healthy system. Going back to the Stripe example,<br>the closed state means requests come and go without the known existence of a Circuit breaker.</p>\n<p>Circuit breaker takes passive action when that HTTP call fails. On every failure,<br>the circuit breaker is listening for failures. The Circuit Breaker opens when the<br>threshold of failures, or rate of failures, is met.</p>\n<p>Once the circuit breaker is open, every HTTP call will fail immediately, bypassing<br>the real call to Stripe. After a pre-defined period, the Circuit Breaker tries a<br>real call to Stripe, leaving the Circuit Breaker on a half-open state. </p>\n<p>On a half-open state, if the request to Stripe succeeds, the Circuit Breaker returns<br>to a closed state, if it fails it returns to an open state.</p>\n<p>Usually, an open state call is a custom exception. When using a Circuit Breaker<br>implementation, make sure you log and monitor this kind of exceptions.</p>\n<h2 id=\"Disyuntor\"><a href=\"#Disyuntor\" class=\"headerlink\" title=\"Disyuntor\"></a>Disyuntor</h2><p><a href=\"https://github.com/auth0/disyuntor\">Disyuntor</a> is an implementation of Circuit Breaker in Node.js by <a href=\"https://auth0.com/\">Auth0</a>. This npm package lets you wrap a critical function in a Circuit Breaker pattern.</p>\n<p>In this tutorial, you will create two services. One of them will be flaky for a deterministic<br>period. The other will issue requests.</p>\n<p>After that, we will add Disyuntor and wrap the call in a Circuit Breaker pattern. You will see the three states in action.</p>\n<h3 id=\"Pre-requisites\"><a href=\"#Pre-requisites\" class=\"headerlink\" title=\"Pre-requisites\"></a>Pre-requisites</h3><p>This is a Node.js tutorial, but also I will use yarn to install packages. Whenever you see <code>yarn add --exact &#123;package&#125;</code> can<br>be replace with <code>npm install --exact &#123;package&#125;</code>. Also I’m doing this in macOS Sierra, so this is a *nix OS. I will try my<br>best to make it cross-platform.</p>\n<p>Let’s create a new project, open up your console and type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; mkdir disyuntor-example &amp;&amp; cd $_</span><br><span class=\"line\">$disyuntor-example&gt; yarn init -y #or npm init -y</span><br></pre></td></tr></table></figure>\n\n<p>We will use Express.js to mock out our two services:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$disyuntor-example&gt; yarn add --exact express</span><br></pre></td></tr></table></figure>\n\n<p>Create the flaky server first: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// flaky.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/:id&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> param = req.params.id;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (param === <span class=\"string\">&quot;0&quot;</span>) &#123;</span><br><span class=\"line\">    blockFor(<span class=\"number\">5</span>);</span><br><span class=\"line\">    res.sendStatus(<span class=\"number\">503</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">200</span>).send(<span class=\"string\">&#x27;I am ok now.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">blockFor</span>(<span class=\"params\">seconds</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> waitTill = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + seconds * <span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(waitTill &gt; <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Flaky app is listening on port 3000&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>For the sake of this tutorial you will use a simple parameter to control if the server is flaky or not. You will notice the function <code>blockFor(seconds)</code>, this was added to simulate a service that takes time to return.</p>\n<p>Before creating the other service, you need to add npm packages to create http request to the flaky service. Also you will add a helper package to run both services from a single command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; yarn add --exact got bluebird concurrently</span><br></pre></td></tr></table></figure>\n\n<p>Now let’s create our consumer service:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// consumer.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app     = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> got     = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;got&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/:id&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> got(<span class=\"string\">`http://localhost:3000/<span class=\"subst\">$&#123;req.params.id&#125;</span>`</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      res.sendStatus(<span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      res.sendStatus(<span class=\"number\">503</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">4000</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Consumer service is listening on port 4000&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>As a final step add a <code>start</code> under <code>scripts</code> into your <code>package.json</code>:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;start&quot;: &quot;concurrently \\&quot;node flaky\\&quot; \\&quot;node consumer\\&quot; &quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>Going back to your terminal window, you can type:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; npm start</span><br><span class=\"line\">&gt; concurrently <span class=\"string\">&quot;node flaky&quot;</span> <span class=\"string\">&quot;node consumer&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[0] Flaky app is listening on port 3000</span><br><span class=\"line\">[1] Consumer service is listening on port 4000</span><br></pre></td></tr></table></figure>\n\n<p>Both services are running, now in a different terminal window you can make a Curl request:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; curl -I http://localhost:4000/1</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">X-Powered-By: Express</span><br><span class=\"line\">Content-Type: text/plain; charset=utf-8</span><br><span class=\"line\">Content-Length: 2</span><br><span class=\"line\">ETag: W/<span class=\"string\">&quot;2-nOO9QiTIwXgNtWtBJezz8kv3SLc&quot;</span></span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Now try to do a request that you know it will return 503:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; curl -I http://localhost:4000/0</span><br><span class=\"line\">HTTP/1.1 503 Service Unavailable</span><br><span class=\"line\">X-Powered-By: Express</span><br><span class=\"line\">Content-Type: text/plain; charset=utf-8</span><br><span class=\"line\">Content-Length: 19</span><br><span class=\"line\">ETag: W/<span class=\"string\">&quot;13-/70LdyMNgL+PAJa+Q/RtnRF82z8&quot;</span></span><br><span class=\"line\">Date: Sun, 28 May 2017 14:26:29 GMT</span><br><span class=\"line\">Connection: keep-alive</span><br></pre></td></tr></table></figure>\n\n<p>Now imagine this is a production setup. Your flaky service is an internal service that has gone down. Your public service start swamping with requests your internal service. After a while your public service becomes unresponsive. </p>\n<p>You can even reproduce that scenario with this command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; curl -I http://localhost:4000/0 &amp;&amp; curl -I http://localhost:4000/0 &amp;&amp; curl -I http://localhost:4000/0</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that takes more than 10 seconds to finish all the requests.</p>\n<p>You can stop both services by pressing Ctrl+C.</p>\n<p>Let’s add Disyuntor to circuit break this requests:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; yarn add --exact disyuntor</span><br></pre></td></tr></table></figure>\n\n<p>Modify your consumer service:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app       = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> got       = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;got&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> disyuntor = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;disyuntor&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> safeGot = disyuntor.promise(got, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;got.request&#x27;</span>,</span><br><span class=\"line\">  timeout: <span class=\"string\">&#x27;10s&#x27;</span>,</span><br><span class=\"line\">  cooldown: <span class=\"string\">&#x27;5s&#x27;</span>,</span><br><span class=\"line\">  maxFailures: <span class=\"number\">1</span>,</span><br><span class=\"line\">  onTrip: <span class=\"function\">(<span class=\"params\">err, failures, cooldown</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`got.request triped because it failed <span class=\"subst\">$&#123;failures&#125;</span> times. Last error was <span class=\"subst\">$&#123;err.message&#125;</span>! There will be no more attempts for <span class=\"subst\">$&#123;cooldown&#125;</span>ms`</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/:id&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> safeGot(<span class=\"string\">`http://localhost:3000/<span class=\"subst\">$&#123;req.params.id&#125;</span>`</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      res.sendStatus(<span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      res.sendStatus(<span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">4000</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Consumer service is listening on port 4000&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>Start both services again with <code>npm start</code>. Start sending requests with curl:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; curl -I http://localhost:4000/0</span><br></pre></td></tr></table></figure>\n\n<p>You will see this message where you started your services:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1] got.request triped because it failed 1 <span class=\"built_in\">times</span>. Last error was Response code 503 (Ser</span><br><span class=\"line\">vice Unavailable)! There will be no more attempts <span class=\"keyword\">for</span> 5000ms</span><br></pre></td></tr></table></figure>\n\n<p>Let’s try this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$disyuntor</span>-example&gt; curl -I http://localhost:4000/0 &amp;&amp; curl -I http://localhost:4000/0 &amp;&amp; curl -I http://localhost:4000/0</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that the first request takes the expected 5 seconds but subsequent request fail immediatedly. This is the Circuit Breaker pattern in action. </p>\n<p>After the first failure, the circuit becomes open. Then after the <em>cooldown</em> period the circuit becomes half-open. If we issue another request after 5 seconds, you will see that it tries again to contact the flaky service.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>When working with multiple external services – either a Db or http service – a good resilience practice is to add a circuit breaker.</p>\n<p>Disyuntor is a good circuit breaker library, it lacks of some features, but it gets the work done. </p>\n"},{"title":"Redis, STunnel, and C#","date":"2017-01-25T00:00:00.000Z","updated":"2017-01-25T00:00:00.000Z","_content":"\nIn this blog post, I will try to demonstrate how to setup a working environment with StackExchange.Redis package is communicating to a Redis box using SSL through STunel. \n\nBy the end of this post, you will have a working environment on Vagrant like this:\n\n<!--more-->\n\n```nohighlight\n                                           +------------------------------+\n                                           |                              |\n                                           |                 Vagrant Box  |\n+--------------+                           +---------+       Ubuntu 14.04 |\n|              |      +------------+       |         |                    |\n|  C# Program  +------+    SSL     +-------+ STunnel +----+               |\n|              |      +------------+       |         |    |               |\n|              |                           +---------+    |               |\n+--------------+                           |              |               |\n                                           |              |               |\n                                           |       +------v-------+       |\n                                           |       |              |       |\n                                           |       |              |       |\n                                           |       |    Redis     |       |\n                                           |       |              |       |\n                                           |       |              |       |\n                                           +-------+--------------+-------+\n\n```\n\n\n## Redis and SSL\nOur first step is to install Redis and then generate a self-signed certificate to be able to connect through an STunnel.\n\nFor this post, we will use Ubuntu 14 on Vagrant, let me know if you want to know how to do it in AWS/Ubuntu 16.\n\n## Setting up Vagrant\n\nOpen up the command line, create a new directory:\n```\n>cd C:\\\n>C:\\mkdir redis-ssl-test\n>C:\\cd redis-ssl-test\n>C:\\redis-ssl-test> mkdir redis-vagrant\n>C:\\redis-ssl-test>cd redis-vagrant\n>C:\\redis-ssl-test\\redis-vagrant> vagrant init\n```\n\nOpen up your `Vagrant` file, and it should look like this:\n\n```ruby\nVagrant.configure(2) do |config|\n  config.vm.box = \"ubuntu/trusty64\"\n  config.vm.hostname = \"redis-stunnel\"\n  config.vm.network :private_network, ip: \"10.0.15.10\"\n  config.vm.network \"forwarded_port\", guest: 6380, host: 6380\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.memory = \"4024\"\n  end\n  config.vm.provision \"shell\", inline: <<-SCRIPT\n    #!/bin/bash\n    echo \"Adding apt-repository\"\n    add-apt-repository -y ppa:chris-lea/redis-server\n    echo \"Updating and upgrading\"\n    apt-get update -y -qq > /dev/null\n    apt-get upgrade -y -qq > /dev/null\n    echo \"Installing redis and stunnel\"\n    apt-get -y -q install redis-server stunnel4\n  SCRIPT\nend\n```\n\nPlease note that the shell script is inline for convenience. There is nothing especial about this setup; we only forward port 6380 for our SSL communication.\n\nGo back to the command line and type:\n```\n>C:\\redis-ssl-test\\redis-vagrant>vagrant up && vagrant ssh\n```\nYou should be inside your test Ubuntu environment. Inside here let's see if we correctly installed Redis.\n\n```\nvagrant@redis-stunnel:~$ redis-cli ping\nPONG\n```\n\nWe don't have to do anything with redis; STunnel will be the one you configure. \n\nThe next step is to enable STunnel, open up stunnel configuration file:\n```\nvagrant@redis-stunnel:~$ sudo vim /etc/default/stunnel4\n```\n\nAnd change `ENABLED=0` to `ENABLED=1`\n\n```\n. . .\nENABLED=1\n. . .\n```\n\nAfter that, you need to create a public/private certificate. \n\n```\nvagrant@redis-stunnel:~$ sudo openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout /etc/stunnel/redis-server.key -out /etc/stunnel/redis-server.crt\n```\n\nYou will get some questions regarding the certificate; the most important ones are __Common Name__ and __Organization Name__. Make sure these match the IP address of your Vagrant box.\n\n```\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:10.0.15.10\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:10.0.15.10\nEmail Address []:\n```\n\nAfter generating the certificates, we will create a new configuration file for STunnel. This configuration will tell STunnel to __listen to an external port__ and redirect traffic to an internal port. In this case, we want STunnel listening to port 6380 and redirecting traffic to port 6379. 6379 is the default Redis port.\n\nGo back to the command line and type:\n\n```\nvagrant@redis-stunnel:~$ sudo vim /etc/stunnel/redis.conf\n```\n\nAnd type the following configuration:\n\n```\npid = /var/run/stunnel.pid\n\n[redis-server]\ncert = /etc/stunnel/redis-server.crt\nkey = /etc/stunnel/redis-server.key\naccept = 6380\nconnect = 127.0.0.1:6379\n```\n\nThe name inside the brackets `[redis-server]` is something we can name per our convenience.\n\nNow you can restart STunnel service:\n\n```\nvagrant@redis-stunnel:~$ sudo service stunnel4 restart\n```\nEverything should be running correctly. You can confirm this by running:\n\n```\nvagrant@redis-stunnel:~$ sudo lsof -i :6379\n\nCOMMAND    PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nredis-ser 7131 redis    4u  IPv4  16619      0t0  TCP redis-stunnel:6379 (LISTEN)\n```\n\n### Installing certificate\n\nThe last step before going to VisualStudio is to install the new `crt` file into your certificate store.\n\nIn a real production environment, this should be defined beforehand (probably), but for now, you will install it as part of the Current User Root store.\n\nTo extract the public certificate from Vagrant, you have to make sure you're back into Windows command line.\n\n```\nC:\\redis-ssl-test\\redis-vagrant> vagrant ssh -c \"sudo cat /etc/stunnel/redis-server.crt\" > redis-server.crt\n```\n\nAfter that, the certificate file should be sitting next to the Vagrantfile.\n\n![](./cert-file.png)\n\nTo install the certificate, you can follow this steps:\n\n* Windows + R -> mmc\n* Click on File -> Add/Remove Snap-In\n* Click on Certificates and then \"Add >\"\n* A new dialog will popup, select \"My user account\" -> Finish\n* Click OK\n* Under Console Root, make sure to expand \"Certificates - Current User.\"\n* Click on \"Trusted Root Certification Authorities\" then on \"Certificates\" folder.\n* You should see a lot of rows with CA\n* Here click on \"More Actions\" at the right menu, then \"All Tasks\" and then \"Import.\"\n* A new dialog will show, click on Next and then Browse for your certificate file.\n* Click Next, and then Next again and Finish.\n* You will get a Security Warning question, answer Yes\n\n![](./import-cert.png)\n\nI know, all those steps, there is a Powershell way to do it, but I will let that to you.\n\nOnce you finished, you will see your new certificate as the first entry on the CA list.\n\nYou can close the snap-in manager; you don't need to save console settings.\n\nYou're ready to go to Visual Studio and use the newly created certificate.\n\n## C# simple project\n\nYou will create a simple C# Console application. \nGo to Visual Studio and click on _File -> New -> Project -> Console Application_\n\nFor your convenience you can set:\n\n* Location: C:\\redis-ssl-test\n* Name: RedisSslTest\n* Create directory for solution: unchecked.\n\n![](./redis-ssl-start.png)\n\n\nYou will need to add \"StackExchange.Redis\" NuGet package for this demo. \n\nGo to _Project -> Manage NuGet packages... -> Browse -> Search -> StackExchange.Redis_ -> Click Install.\n\n\nThe source code for connecting to Redis goes like this:\n\n```csharp\nusing System;\nusing System.Security.Cryptography.X509Certificates;\nusing StackExchange.Redis;\n\nnamespace RedisSslTest\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var configurationOptions = new ConfigurationOptions\n            {\n                EndPoints = { \"10.0.15.10:6380\" },\n                Ssl = true\n            };\n\n            configurationOptions.CertificateSelection += OptionsOnCertificateSelection;\n\n            var redis = ConnectionMultiplexer.Connect(configurationOptions);\n            var db = redis.GetDatabase();\n            db.ListLeftPush(\"test\", \"from c#\");\n            Console.ReadKey();\n        }\n\n        private static X509Certificate OptionsOnCertificateSelection(object s, string t, X509CertificateCollection local, X509Certificate remote, string[] a)\n        {\n            const StoreName storeName = StoreName.Root;\n            const StoreLocation certificateStoreLocation = StoreLocation.CurrentUser;\n            const X509FindType findType = X509FindType.FindBySubjectName;\n            var certificateAuthorityStore = new X509Store(storeName, certificateStoreLocation);\n\n            certificateAuthorityStore.Open(OpenFlags.ReadOnly);\n\n            var certificatesInStore = certificateAuthorityStore\n                .Certificates\n                .Find(findType, \"10.0.15.10\", true);\n\n            return certificatesInStore[0];\n        }\n    }\n}\n\n```\n\nThe magic of this code happens at the handling of `CertificateSelection`. \nHere we read the certificates installed on our computer, in this case, Current User, \nand let the Redis package now it will need it to communicate through SSL to our local Vagrant machine.\n\nI wanted to show you the hard way of installing the certificate because when I was doing testing, \nalways got an exception if __I didn't install the certificate first as part of the machine.__\n\nThe easier way to do it, and the way you will find it on examples is like this:\n\n```csharp\nusing System;\nusing System.Security.Cryptography.X509Certificates;\nusing StackExchange.Redis;\n\nnamespace RedisSslTest\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var configurationOptions = new ConfigurationOptions\n            {\n                EndPoints = { \"10.0.15.10:6380\" },\n                Ssl = true\n            };\n\n            configurationOptions.CertificateSelection += OptionsOnCertificateSelection;\n\n            var redis = ConnectionMultiplexer.Connect(configurationOptions);\n            var db = redis.GetDatabase();\n            db.ListLeftPush(\"test\", \"from c#\");\n            Console.ReadKey();\n        }\n\n        private static X509Certificate OptionsOnCertificateSelection(object s, string t, X509CertificateCollection local, X509Certificate remote, string[] a)\n        {\n            return new X509Certificate2(@\"C:\\redis-ssl-test\\redis-vagrant\\redis-server.crt\");\n        }\n    }\n}\n```\n\nEither way if you back to your Vagrant box, you can type:\n\n```\nvagrant@redis-stunnel:~$ redis-cli\n127.0.0.1:6379> lrange test 0 -1\n1) \"from c#\"\n2) \"from c#\"\n```\n\n![](./redis-cli-result.png)\n\n## Conclusion\n\nMost of the problems I had while trying this setup was the `CertificateSelection` handler.  Most examples online never combine having a self-signed certificate that won't communicate to SSL directly and debugging `StackExchange.Redis` made it it easy.\n\nMy only complaint is that `StackExchange.Redis` swallows the exception that tells you [exactly what's going on ](https://github.com/StackExchange/StackExchange.Redis/blob/master/StackExchange.Redis/StackExchange/Redis/PhysicalConnection.cs#L792)\n\n\n\n\n\n","source":"_posts/redis-stunnel-and-c.md","raw":"---\ntitle: Redis, STunnel, and C#\ndate: '2017-01-25T00:00:00Z'\nupdated: '2017-01-25T00:00:00Z'\n---\n\nIn this blog post, I will try to demonstrate how to setup a working environment with StackExchange.Redis package is communicating to a Redis box using SSL through STunel. \n\nBy the end of this post, you will have a working environment on Vagrant like this:\n\n<!--more-->\n\n```nohighlight\n                                           +------------------------------+\n                                           |                              |\n                                           |                 Vagrant Box  |\n+--------------+                           +---------+       Ubuntu 14.04 |\n|              |      +------------+       |         |                    |\n|  C# Program  +------+    SSL     +-------+ STunnel +----+               |\n|              |      +------------+       |         |    |               |\n|              |                           +---------+    |               |\n+--------------+                           |              |               |\n                                           |              |               |\n                                           |       +------v-------+       |\n                                           |       |              |       |\n                                           |       |              |       |\n                                           |       |    Redis     |       |\n                                           |       |              |       |\n                                           |       |              |       |\n                                           +-------+--------------+-------+\n\n```\n\n\n## Redis and SSL\nOur first step is to install Redis and then generate a self-signed certificate to be able to connect through an STunnel.\n\nFor this post, we will use Ubuntu 14 on Vagrant, let me know if you want to know how to do it in AWS/Ubuntu 16.\n\n## Setting up Vagrant\n\nOpen up the command line, create a new directory:\n```\n>cd C:\\\n>C:\\mkdir redis-ssl-test\n>C:\\cd redis-ssl-test\n>C:\\redis-ssl-test> mkdir redis-vagrant\n>C:\\redis-ssl-test>cd redis-vagrant\n>C:\\redis-ssl-test\\redis-vagrant> vagrant init\n```\n\nOpen up your `Vagrant` file, and it should look like this:\n\n```ruby\nVagrant.configure(2) do |config|\n  config.vm.box = \"ubuntu/trusty64\"\n  config.vm.hostname = \"redis-stunnel\"\n  config.vm.network :private_network, ip: \"10.0.15.10\"\n  config.vm.network \"forwarded_port\", guest: 6380, host: 6380\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.memory = \"4024\"\n  end\n  config.vm.provision \"shell\", inline: <<-SCRIPT\n    #!/bin/bash\n    echo \"Adding apt-repository\"\n    add-apt-repository -y ppa:chris-lea/redis-server\n    echo \"Updating and upgrading\"\n    apt-get update -y -qq > /dev/null\n    apt-get upgrade -y -qq > /dev/null\n    echo \"Installing redis and stunnel\"\n    apt-get -y -q install redis-server stunnel4\n  SCRIPT\nend\n```\n\nPlease note that the shell script is inline for convenience. There is nothing especial about this setup; we only forward port 6380 for our SSL communication.\n\nGo back to the command line and type:\n```\n>C:\\redis-ssl-test\\redis-vagrant>vagrant up && vagrant ssh\n```\nYou should be inside your test Ubuntu environment. Inside here let's see if we correctly installed Redis.\n\n```\nvagrant@redis-stunnel:~$ redis-cli ping\nPONG\n```\n\nWe don't have to do anything with redis; STunnel will be the one you configure. \n\nThe next step is to enable STunnel, open up stunnel configuration file:\n```\nvagrant@redis-stunnel:~$ sudo vim /etc/default/stunnel4\n```\n\nAnd change `ENABLED=0` to `ENABLED=1`\n\n```\n. . .\nENABLED=1\n. . .\n```\n\nAfter that, you need to create a public/private certificate. \n\n```\nvagrant@redis-stunnel:~$ sudo openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout /etc/stunnel/redis-server.key -out /etc/stunnel/redis-server.crt\n```\n\nYou will get some questions regarding the certificate; the most important ones are __Common Name__ and __Organization Name__. Make sure these match the IP address of your Vagrant box.\n\n```\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:10.0.15.10\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:10.0.15.10\nEmail Address []:\n```\n\nAfter generating the certificates, we will create a new configuration file for STunnel. This configuration will tell STunnel to __listen to an external port__ and redirect traffic to an internal port. In this case, we want STunnel listening to port 6380 and redirecting traffic to port 6379. 6379 is the default Redis port.\n\nGo back to the command line and type:\n\n```\nvagrant@redis-stunnel:~$ sudo vim /etc/stunnel/redis.conf\n```\n\nAnd type the following configuration:\n\n```\npid = /var/run/stunnel.pid\n\n[redis-server]\ncert = /etc/stunnel/redis-server.crt\nkey = /etc/stunnel/redis-server.key\naccept = 6380\nconnect = 127.0.0.1:6379\n```\n\nThe name inside the brackets `[redis-server]` is something we can name per our convenience.\n\nNow you can restart STunnel service:\n\n```\nvagrant@redis-stunnel:~$ sudo service stunnel4 restart\n```\nEverything should be running correctly. You can confirm this by running:\n\n```\nvagrant@redis-stunnel:~$ sudo lsof -i :6379\n\nCOMMAND    PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nredis-ser 7131 redis    4u  IPv4  16619      0t0  TCP redis-stunnel:6379 (LISTEN)\n```\n\n### Installing certificate\n\nThe last step before going to VisualStudio is to install the new `crt` file into your certificate store.\n\nIn a real production environment, this should be defined beforehand (probably), but for now, you will install it as part of the Current User Root store.\n\nTo extract the public certificate from Vagrant, you have to make sure you're back into Windows command line.\n\n```\nC:\\redis-ssl-test\\redis-vagrant> vagrant ssh -c \"sudo cat /etc/stunnel/redis-server.crt\" > redis-server.crt\n```\n\nAfter that, the certificate file should be sitting next to the Vagrantfile.\n\n![](./cert-file.png)\n\nTo install the certificate, you can follow this steps:\n\n* Windows + R -> mmc\n* Click on File -> Add/Remove Snap-In\n* Click on Certificates and then \"Add >\"\n* A new dialog will popup, select \"My user account\" -> Finish\n* Click OK\n* Under Console Root, make sure to expand \"Certificates - Current User.\"\n* Click on \"Trusted Root Certification Authorities\" then on \"Certificates\" folder.\n* You should see a lot of rows with CA\n* Here click on \"More Actions\" at the right menu, then \"All Tasks\" and then \"Import.\"\n* A new dialog will show, click on Next and then Browse for your certificate file.\n* Click Next, and then Next again and Finish.\n* You will get a Security Warning question, answer Yes\n\n![](./import-cert.png)\n\nI know, all those steps, there is a Powershell way to do it, but I will let that to you.\n\nOnce you finished, you will see your new certificate as the first entry on the CA list.\n\nYou can close the snap-in manager; you don't need to save console settings.\n\nYou're ready to go to Visual Studio and use the newly created certificate.\n\n## C# simple project\n\nYou will create a simple C# Console application. \nGo to Visual Studio and click on _File -> New -> Project -> Console Application_\n\nFor your convenience you can set:\n\n* Location: C:\\redis-ssl-test\n* Name: RedisSslTest\n* Create directory for solution: unchecked.\n\n![](./redis-ssl-start.png)\n\n\nYou will need to add \"StackExchange.Redis\" NuGet package for this demo. \n\nGo to _Project -> Manage NuGet packages... -> Browse -> Search -> StackExchange.Redis_ -> Click Install.\n\n\nThe source code for connecting to Redis goes like this:\n\n```csharp\nusing System;\nusing System.Security.Cryptography.X509Certificates;\nusing StackExchange.Redis;\n\nnamespace RedisSslTest\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var configurationOptions = new ConfigurationOptions\n            {\n                EndPoints = { \"10.0.15.10:6380\" },\n                Ssl = true\n            };\n\n            configurationOptions.CertificateSelection += OptionsOnCertificateSelection;\n\n            var redis = ConnectionMultiplexer.Connect(configurationOptions);\n            var db = redis.GetDatabase();\n            db.ListLeftPush(\"test\", \"from c#\");\n            Console.ReadKey();\n        }\n\n        private static X509Certificate OptionsOnCertificateSelection(object s, string t, X509CertificateCollection local, X509Certificate remote, string[] a)\n        {\n            const StoreName storeName = StoreName.Root;\n            const StoreLocation certificateStoreLocation = StoreLocation.CurrentUser;\n            const X509FindType findType = X509FindType.FindBySubjectName;\n            var certificateAuthorityStore = new X509Store(storeName, certificateStoreLocation);\n\n            certificateAuthorityStore.Open(OpenFlags.ReadOnly);\n\n            var certificatesInStore = certificateAuthorityStore\n                .Certificates\n                .Find(findType, \"10.0.15.10\", true);\n\n            return certificatesInStore[0];\n        }\n    }\n}\n\n```\n\nThe magic of this code happens at the handling of `CertificateSelection`. \nHere we read the certificates installed on our computer, in this case, Current User, \nand let the Redis package now it will need it to communicate through SSL to our local Vagrant machine.\n\nI wanted to show you the hard way of installing the certificate because when I was doing testing, \nalways got an exception if __I didn't install the certificate first as part of the machine.__\n\nThe easier way to do it, and the way you will find it on examples is like this:\n\n```csharp\nusing System;\nusing System.Security.Cryptography.X509Certificates;\nusing StackExchange.Redis;\n\nnamespace RedisSslTest\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var configurationOptions = new ConfigurationOptions\n            {\n                EndPoints = { \"10.0.15.10:6380\" },\n                Ssl = true\n            };\n\n            configurationOptions.CertificateSelection += OptionsOnCertificateSelection;\n\n            var redis = ConnectionMultiplexer.Connect(configurationOptions);\n            var db = redis.GetDatabase();\n            db.ListLeftPush(\"test\", \"from c#\");\n            Console.ReadKey();\n        }\n\n        private static X509Certificate OptionsOnCertificateSelection(object s, string t, X509CertificateCollection local, X509Certificate remote, string[] a)\n        {\n            return new X509Certificate2(@\"C:\\redis-ssl-test\\redis-vagrant\\redis-server.crt\");\n        }\n    }\n}\n```\n\nEither way if you back to your Vagrant box, you can type:\n\n```\nvagrant@redis-stunnel:~$ redis-cli\n127.0.0.1:6379> lrange test 0 -1\n1) \"from c#\"\n2) \"from c#\"\n```\n\n![](./redis-cli-result.png)\n\n## Conclusion\n\nMost of the problems I had while trying this setup was the `CertificateSelection` handler.  Most examples online never combine having a self-signed certificate that won't communicate to SSL directly and debugging `StackExchange.Redis` made it it easy.\n\nMy only complaint is that `StackExchange.Redis` swallows the exception that tells you [exactly what's going on ](https://github.com/StackExchange/StackExchange.Redis/blob/master/StackExchange.Redis/StackExchange/Redis/PhysicalConnection.cs#L792)\n\n\n\n\n\n","slug":"redis-stunnel-and-c","published":1,"_id":"ckii1safz00052jxygttsafkv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In this blog post, I will try to demonstrate how to setup a working environment with StackExchange.Redis package is communicating to a Redis box using SSL through STunel. </p>\n<p>By the end of this post, you will have a working environment on Vagrant like this:</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                           +------------------------------+</span><br><span class=\"line\">                                           |                              |</span><br><span class=\"line\">                                           |                 Vagrant Box  |</span><br><span class=\"line\">+--------------+                           +---------+       Ubuntu 14.04 |</span><br><span class=\"line\">|              |      +------------+       |         |                    |</span><br><span class=\"line\">|  C# Program  +------+    SSL     +-------+ STunnel +----+               |</span><br><span class=\"line\">|              |      +------------+       |         |    |               |</span><br><span class=\"line\">|              |                           +---------+    |               |</span><br><span class=\"line\">+--------------+                           |              |               |</span><br><span class=\"line\">                                           |              |               |</span><br><span class=\"line\">                                           |       +------v-------+       |</span><br><span class=\"line\">                                           |       |              |       |</span><br><span class=\"line\">                                           |       |              |       |</span><br><span class=\"line\">                                           |       |    Redis     |       |</span><br><span class=\"line\">                                           |       |              |       |</span><br><span class=\"line\">                                           |       |              |       |</span><br><span class=\"line\">                                           +-------+--------------+-------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Redis-and-SSL\"><a href=\"#Redis-and-SSL\" class=\"headerlink\" title=\"Redis and SSL\"></a>Redis and SSL</h2><p>Our first step is to install Redis and then generate a self-signed certificate to be able to connect through an STunnel.</p>\n<p>For this post, we will use Ubuntu 14 on Vagrant, let me know if you want to know how to do it in AWS/Ubuntu 16.</p>\n<h2 id=\"Setting-up-Vagrant\"><a href=\"#Setting-up-Vagrant\" class=\"headerlink\" title=\"Setting up Vagrant\"></a>Setting up Vagrant</h2><p>Open up the command line, create a new directory:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;cd C:\\</span><br><span class=\"line\">&gt;C:\\mkdir redis-ssl-test</span><br><span class=\"line\">&gt;C:\\cd redis-ssl-test</span><br><span class=\"line\">&gt;C:\\redis-ssl-test&gt; mkdir redis-vagrant</span><br><span class=\"line\">&gt;C:\\redis-ssl-test&gt;cd redis-vagrant</span><br><span class=\"line\">&gt;C:\\redis-ssl-test\\redis-vagrant&gt; vagrant init</span><br></pre></td></tr></table></figure>\n\n<p>Open up your <code>Vagrant</code> file, and it should look like this:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vagrant.configure(<span class=\"number\">2</span>) <span class=\"keyword\">do</span> <span class=\"params\">|config|</span></span><br><span class=\"line\">  config.vm.box = <span class=\"string\">&quot;ubuntu/trusty64&quot;</span></span><br><span class=\"line\">  config.vm.hostname = <span class=\"string\">&quot;redis-stunnel&quot;</span></span><br><span class=\"line\">  config.vm.network <span class=\"symbol\">:private_network</span>, <span class=\"symbol\">ip:</span> <span class=\"string\">&quot;10.0.15.10&quot;</span></span><br><span class=\"line\">  config.vm.network <span class=\"string\">&quot;forwarded_port&quot;</span>, <span class=\"symbol\">guest:</span> <span class=\"number\">6380</span>, <span class=\"symbol\">host:</span> <span class=\"number\">6380</span></span><br><span class=\"line\">  config.vm.provider <span class=\"string\">&quot;virtualbox&quot;</span> <span class=\"keyword\">do</span> <span class=\"params\">|vb|</span></span><br><span class=\"line\">    vb.memory = <span class=\"string\">&quot;4024&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  config.vm.provision <span class=\"string\">&quot;shell&quot;</span>, <span class=\"symbol\">inline:</span> &lt;&lt;-SCRIPT</span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">    echo <span class=\"string\">&quot;Adding apt-repository&quot;</span></span><br><span class=\"line\">    add-apt-repository -y <span class=\"symbol\">ppa:</span>chris-lea/redis-server</span><br><span class=\"line\">    echo <span class=\"string\">&quot;Updating and upgrading&quot;</span></span><br><span class=\"line\">    apt-get update -y -qq &gt; <span class=\"regexp\">/dev/null</span></span><br><span class=\"line\">    apt-get upgrade -y -qq &gt; <span class=\"regexp\">/dev/null</span></span><br><span class=\"line\">    echo <span class=\"string\">&quot;Installing redis and stunnel&quot;</span></span><br><span class=\"line\">    apt-get -y -q install redis-server stunnel4</span><br><span class=\"line\">  SCRIPT</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Please note that the shell script is inline for convenience. There is nothing especial about this setup; we only forward port 6380 for our SSL communication.</p>\n<p>Go back to the command line and type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;C:\\redis-ssl-test\\redis-vagrant&gt;vagrant up &amp;&amp; vagrant ssh</span><br></pre></td></tr></table></figure>\n<p>You should be inside your test Ubuntu environment. Inside here let’s see if we correctly installed Redis.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ redis-cli ping</span><br><span class=\"line\">PONG</span><br></pre></td></tr></table></figure>\n\n<p>We don’t have to do anything with redis; STunnel will be the one you configure. </p>\n<p>The next step is to enable STunnel, open up stunnel configuration file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ sudo vim &#x2F;etc&#x2F;default&#x2F;stunnel4</span><br></pre></td></tr></table></figure>\n\n<p>And change <code>ENABLED=0</code> to <code>ENABLED=1</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">ENABLED&#x3D;1</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>After that, you need to create a public/private certificate. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ sudo openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout &#x2F;etc&#x2F;stunnel&#x2F;redis-server.key -out &#x2F;etc&#x2F;stunnel&#x2F;redis-server.crt</span><br></pre></td></tr></table></figure>\n\n<p>You will get some questions regarding the certificate; the most important ones are <strong>Common Name</strong> and <strong>Organization Name</strong>. Make sure these match the IP address of your Vagrant box.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Country Name (2 letter code) [AU]:US</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:</span><br><span class=\"line\">Locality Name (eg, city) []:</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:10.0.15.10</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:</span><br><span class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:10.0.15.10</span><br><span class=\"line\">Email Address []:</span><br></pre></td></tr></table></figure>\n\n<p>After generating the certificates, we will create a new configuration file for STunnel. This configuration will tell STunnel to <strong>listen to an external port</strong> and redirect traffic to an internal port. In this case, we want STunnel listening to port 6380 and redirecting traffic to port 6379. 6379 is the default Redis port.</p>\n<p>Go back to the command line and type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ sudo vim &#x2F;etc&#x2F;stunnel&#x2F;redis.conf</span><br></pre></td></tr></table></figure>\n\n<p>And type the following configuration:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pid &#x3D; &#x2F;var&#x2F;run&#x2F;stunnel.pid</span><br><span class=\"line\"></span><br><span class=\"line\">[redis-server]</span><br><span class=\"line\">cert &#x3D; &#x2F;etc&#x2F;stunnel&#x2F;redis-server.crt</span><br><span class=\"line\">key &#x3D; &#x2F;etc&#x2F;stunnel&#x2F;redis-server.key</span><br><span class=\"line\">accept &#x3D; 6380</span><br><span class=\"line\">connect &#x3D; 127.0.0.1:6379</span><br></pre></td></tr></table></figure>\n\n<p>The name inside the brackets <code>[redis-server]</code> is something we can name per our convenience.</p>\n<p>Now you can restart STunnel service:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ sudo service stunnel4 restart</span><br></pre></td></tr></table></figure>\n<p>Everything should be running correctly. You can confirm this by running:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ sudo lsof -i :6379</span><br><span class=\"line\"></span><br><span class=\"line\">COMMAND    PID  USER   FD   TYPE DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class=\"line\">redis-ser 7131 redis    4u  IPv4  16619      0t0  TCP redis-stunnel:6379 (LISTEN)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Installing-certificate\"><a href=\"#Installing-certificate\" class=\"headerlink\" title=\"Installing certificate\"></a>Installing certificate</h3><p>The last step before going to VisualStudio is to install the new <code>crt</code> file into your certificate store.</p>\n<p>In a real production environment, this should be defined beforehand (probably), but for now, you will install it as part of the Current User Root store.</p>\n<p>To extract the public certificate from Vagrant, you have to make sure you’re back into Windows command line.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\redis-ssl-test\\redis-vagrant&gt; vagrant ssh -c &quot;sudo cat &#x2F;etc&#x2F;stunnel&#x2F;redis-server.crt&quot; &gt; redis-server.crt</span><br></pre></td></tr></table></figure>\n\n<p>After that, the certificate file should be sitting next to the Vagrantfile.</p>\n<p><img src=\"./cert-file.png\"></p>\n<p>To install the certificate, you can follow this steps:</p>\n<ul>\n<li>Windows + R -&gt; mmc</li>\n<li>Click on File -&gt; Add/Remove Snap-In</li>\n<li>Click on Certificates and then “Add &gt;”</li>\n<li>A new dialog will popup, select “My user account” -&gt; Finish</li>\n<li>Click OK</li>\n<li>Under Console Root, make sure to expand “Certificates - Current User.”</li>\n<li>Click on “Trusted Root Certification Authorities” then on “Certificates” folder.</li>\n<li>You should see a lot of rows with CA</li>\n<li>Here click on “More Actions” at the right menu, then “All Tasks” and then “Import.”</li>\n<li>A new dialog will show, click on Next and then Browse for your certificate file.</li>\n<li>Click Next, and then Next again and Finish.</li>\n<li>You will get a Security Warning question, answer Yes</li>\n</ul>\n<p><img src=\"./import-cert.png\"></p>\n<p>I know, all those steps, there is a Powershell way to do it, but I will let that to you.</p>\n<p>Once you finished, you will see your new certificate as the first entry on the CA list.</p>\n<p>You can close the snap-in manager; you don’t need to save console settings.</p>\n<p>You’re ready to go to Visual Studio and use the newly created certificate.</p>\n<h2 id=\"C-simple-project\"><a href=\"#C-simple-project\" class=\"headerlink\" title=\"C# simple project\"></a>C# simple project</h2><p>You will create a simple C# Console application.<br>Go to Visual Studio and click on <em>File -&gt; New -&gt; Project -&gt; Console Application</em></p>\n<p>For your convenience you can set:</p>\n<ul>\n<li>Location: C:\\redis-ssl-test</li>\n<li>Name: RedisSslTest</li>\n<li>Create directory for solution: unchecked.</li>\n</ul>\n<p><img src=\"./redis-ssl-start.png\"></p>\n<p>You will need to add “StackExchange.Redis” NuGet package for this demo. </p>\n<p>Go to <em>Project -&gt; Manage NuGet packages… -&gt; Browse -&gt; Search -&gt; StackExchange.Redis</em> -&gt; Click Install.</p>\n<p>The source code for connecting to Redis goes like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Cryptography.X509Certificates;</span><br><span class=\"line\"><span class=\"keyword\">using</span> StackExchange.Redis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RedisSslTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> configurationOptions = <span class=\"keyword\">new</span> ConfigurationOptions</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                EndPoints = &#123; <span class=\"string\">&quot;10.0.15.10:6380&quot;</span> &#125;,</span><br><span class=\"line\">                Ssl = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            configurationOptions.CertificateSelection += OptionsOnCertificateSelection;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> redis = ConnectionMultiplexer.Connect(configurationOptions);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> db = redis.GetDatabase();</span><br><span class=\"line\">            db.ListLeftPush(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;from c#&quot;</span>);</span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> X509Certificate <span class=\"title\">OptionsOnCertificateSelection</span>(<span class=\"params\"><span class=\"built_in\">object</span> s, <span class=\"built_in\">string</span> t, X509CertificateCollection local, X509Certificate remote, <span class=\"built_in\">string</span>[] a</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> StoreName storeName = StoreName.Root;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> StoreLocation certificateStoreLocation = StoreLocation.CurrentUser;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> X509FindType findType = X509FindType.FindBySubjectName;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> certificateAuthorityStore = <span class=\"keyword\">new</span> X509Store(storeName, certificateStoreLocation);</span><br><span class=\"line\"></span><br><span class=\"line\">            certificateAuthorityStore.Open(OpenFlags.ReadOnly);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> certificatesInStore = certificateAuthorityStore</span><br><span class=\"line\">                .Certificates</span><br><span class=\"line\">                .Find(findType, <span class=\"string\">&quot;10.0.15.10&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> certificatesInStore[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The magic of this code happens at the handling of <code>CertificateSelection</code>.<br>Here we read the certificates installed on our computer, in this case, Current User,<br>and let the Redis package now it will need it to communicate through SSL to our local Vagrant machine.</p>\n<p>I wanted to show you the hard way of installing the certificate because when I was doing testing,<br>always got an exception if <strong>I didn’t install the certificate first as part of the machine.</strong></p>\n<p>The easier way to do it, and the way you will find it on examples is like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Cryptography.X509Certificates;</span><br><span class=\"line\"><span class=\"keyword\">using</span> StackExchange.Redis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RedisSslTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> configurationOptions = <span class=\"keyword\">new</span> ConfigurationOptions</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                EndPoints = &#123; <span class=\"string\">&quot;10.0.15.10:6380&quot;</span> &#125;,</span><br><span class=\"line\">                Ssl = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            configurationOptions.CertificateSelection += OptionsOnCertificateSelection;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> redis = ConnectionMultiplexer.Connect(configurationOptions);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> db = redis.GetDatabase();</span><br><span class=\"line\">            db.ListLeftPush(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;from c#&quot;</span>);</span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> X509Certificate <span class=\"title\">OptionsOnCertificateSelection</span>(<span class=\"params\"><span class=\"built_in\">object</span> s, <span class=\"built_in\">string</span> t, X509CertificateCollection local, X509Certificate remote, <span class=\"built_in\">string</span>[] a</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate2(<span class=\"string\">@&quot;C:\\redis-ssl-test\\redis-vagrant\\redis-server.crt&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Either way if you back to your Vagrant box, you can type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange test 0 -1</span><br><span class=\"line\">1) &quot;from c#&quot;</span><br><span class=\"line\">2) &quot;from c#&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./redis-cli-result.png\"></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Most of the problems I had while trying this setup was the <code>CertificateSelection</code> handler.  Most examples online never combine having a self-signed certificate that won’t communicate to SSL directly and debugging <code>StackExchange.Redis</code> made it it easy.</p>\n<p>My only complaint is that <code>StackExchange.Redis</code> swallows the exception that tells you <a href=\"https://github.com/StackExchange/StackExchange.Redis/blob/master/StackExchange.Redis/StackExchange/Redis/PhysicalConnection.cs#L792\">exactly what’s going on </a></p>\n","site":{"data":{}},"excerpt":"<p>In this blog post, I will try to demonstrate how to setup a working environment with StackExchange.Redis package is communicating to a Redis box using SSL through STunel. </p>\n<p>By the end of this post, you will have a working environment on Vagrant like this:</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                           +------------------------------+</span><br><span class=\"line\">                                           |                              |</span><br><span class=\"line\">                                           |                 Vagrant Box  |</span><br><span class=\"line\">+--------------+                           +---------+       Ubuntu 14.04 |</span><br><span class=\"line\">|              |      +------------+       |         |                    |</span><br><span class=\"line\">|  C# Program  +------+    SSL     +-------+ STunnel +----+               |</span><br><span class=\"line\">|              |      +------------+       |         |    |               |</span><br><span class=\"line\">|              |                           +---------+    |               |</span><br><span class=\"line\">+--------------+                           |              |               |</span><br><span class=\"line\">                                           |              |               |</span><br><span class=\"line\">                                           |       +------v-------+       |</span><br><span class=\"line\">                                           |       |              |       |</span><br><span class=\"line\">                                           |       |              |       |</span><br><span class=\"line\">                                           |       |    Redis     |       |</span><br><span class=\"line\">                                           |       |              |       |</span><br><span class=\"line\">                                           |       |              |       |</span><br><span class=\"line\">                                           +-------+--------------+-------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Redis-and-SSL\"><a href=\"#Redis-and-SSL\" class=\"headerlink\" title=\"Redis and SSL\"></a>Redis and SSL</h2><p>Our first step is to install Redis and then generate a self-signed certificate to be able to connect through an STunnel.</p>\n<p>For this post, we will use Ubuntu 14 on Vagrant, let me know if you want to know how to do it in AWS/Ubuntu 16.</p>\n<h2 id=\"Setting-up-Vagrant\"><a href=\"#Setting-up-Vagrant\" class=\"headerlink\" title=\"Setting up Vagrant\"></a>Setting up Vagrant</h2><p>Open up the command line, create a new directory:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;cd C:\\</span><br><span class=\"line\">&gt;C:\\mkdir redis-ssl-test</span><br><span class=\"line\">&gt;C:\\cd redis-ssl-test</span><br><span class=\"line\">&gt;C:\\redis-ssl-test&gt; mkdir redis-vagrant</span><br><span class=\"line\">&gt;C:\\redis-ssl-test&gt;cd redis-vagrant</span><br><span class=\"line\">&gt;C:\\redis-ssl-test\\redis-vagrant&gt; vagrant init</span><br></pre></td></tr></table></figure>\n\n<p>Open up your <code>Vagrant</code> file, and it should look like this:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vagrant.configure(<span class=\"number\">2</span>) <span class=\"keyword\">do</span> <span class=\"params\">|config|</span></span><br><span class=\"line\">  config.vm.box = <span class=\"string\">&quot;ubuntu/trusty64&quot;</span></span><br><span class=\"line\">  config.vm.hostname = <span class=\"string\">&quot;redis-stunnel&quot;</span></span><br><span class=\"line\">  config.vm.network <span class=\"symbol\">:private_network</span>, <span class=\"symbol\">ip:</span> <span class=\"string\">&quot;10.0.15.10&quot;</span></span><br><span class=\"line\">  config.vm.network <span class=\"string\">&quot;forwarded_port&quot;</span>, <span class=\"symbol\">guest:</span> <span class=\"number\">6380</span>, <span class=\"symbol\">host:</span> <span class=\"number\">6380</span></span><br><span class=\"line\">  config.vm.provider <span class=\"string\">&quot;virtualbox&quot;</span> <span class=\"keyword\">do</span> <span class=\"params\">|vb|</span></span><br><span class=\"line\">    vb.memory = <span class=\"string\">&quot;4024&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  config.vm.provision <span class=\"string\">&quot;shell&quot;</span>, <span class=\"symbol\">inline:</span> &lt;&lt;-SCRIPT</span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">    echo <span class=\"string\">&quot;Adding apt-repository&quot;</span></span><br><span class=\"line\">    add-apt-repository -y <span class=\"symbol\">ppa:</span>chris-lea/redis-server</span><br><span class=\"line\">    echo <span class=\"string\">&quot;Updating and upgrading&quot;</span></span><br><span class=\"line\">    apt-get update -y -qq &gt; <span class=\"regexp\">/dev/null</span></span><br><span class=\"line\">    apt-get upgrade -y -qq &gt; <span class=\"regexp\">/dev/null</span></span><br><span class=\"line\">    echo <span class=\"string\">&quot;Installing redis and stunnel&quot;</span></span><br><span class=\"line\">    apt-get -y -q install redis-server stunnel4</span><br><span class=\"line\">  SCRIPT</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Please note that the shell script is inline for convenience. There is nothing especial about this setup; we only forward port 6380 for our SSL communication.</p>\n<p>Go back to the command line and type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;C:\\redis-ssl-test\\redis-vagrant&gt;vagrant up &amp;&amp; vagrant ssh</span><br></pre></td></tr></table></figure>\n<p>You should be inside your test Ubuntu environment. Inside here let’s see if we correctly installed Redis.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ redis-cli ping</span><br><span class=\"line\">PONG</span><br></pre></td></tr></table></figure>\n\n<p>We don’t have to do anything with redis; STunnel will be the one you configure. </p>\n<p>The next step is to enable STunnel, open up stunnel configuration file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ sudo vim &#x2F;etc&#x2F;default&#x2F;stunnel4</span><br></pre></td></tr></table></figure>\n\n<p>And change <code>ENABLED=0</code> to <code>ENABLED=1</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">ENABLED&#x3D;1</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>After that, you need to create a public/private certificate. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ sudo openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout &#x2F;etc&#x2F;stunnel&#x2F;redis-server.key -out &#x2F;etc&#x2F;stunnel&#x2F;redis-server.crt</span><br></pre></td></tr></table></figure>\n\n<p>You will get some questions regarding the certificate; the most important ones are <strong>Common Name</strong> and <strong>Organization Name</strong>. Make sure these match the IP address of your Vagrant box.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Country Name (2 letter code) [AU]:US</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:</span><br><span class=\"line\">Locality Name (eg, city) []:</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:10.0.15.10</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:</span><br><span class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:10.0.15.10</span><br><span class=\"line\">Email Address []:</span><br></pre></td></tr></table></figure>\n\n<p>After generating the certificates, we will create a new configuration file for STunnel. This configuration will tell STunnel to <strong>listen to an external port</strong> and redirect traffic to an internal port. In this case, we want STunnel listening to port 6380 and redirecting traffic to port 6379. 6379 is the default Redis port.</p>\n<p>Go back to the command line and type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ sudo vim &#x2F;etc&#x2F;stunnel&#x2F;redis.conf</span><br></pre></td></tr></table></figure>\n\n<p>And type the following configuration:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pid &#x3D; &#x2F;var&#x2F;run&#x2F;stunnel.pid</span><br><span class=\"line\"></span><br><span class=\"line\">[redis-server]</span><br><span class=\"line\">cert &#x3D; &#x2F;etc&#x2F;stunnel&#x2F;redis-server.crt</span><br><span class=\"line\">key &#x3D; &#x2F;etc&#x2F;stunnel&#x2F;redis-server.key</span><br><span class=\"line\">accept &#x3D; 6380</span><br><span class=\"line\">connect &#x3D; 127.0.0.1:6379</span><br></pre></td></tr></table></figure>\n\n<p>The name inside the brackets <code>[redis-server]</code> is something we can name per our convenience.</p>\n<p>Now you can restart STunnel service:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ sudo service stunnel4 restart</span><br></pre></td></tr></table></figure>\n<p>Everything should be running correctly. You can confirm this by running:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ sudo lsof -i :6379</span><br><span class=\"line\"></span><br><span class=\"line\">COMMAND    PID  USER   FD   TYPE DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class=\"line\">redis-ser 7131 redis    4u  IPv4  16619      0t0  TCP redis-stunnel:6379 (LISTEN)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Installing-certificate\"><a href=\"#Installing-certificate\" class=\"headerlink\" title=\"Installing certificate\"></a>Installing certificate</h3><p>The last step before going to VisualStudio is to install the new <code>crt</code> file into your certificate store.</p>\n<p>In a real production environment, this should be defined beforehand (probably), but for now, you will install it as part of the Current User Root store.</p>\n<p>To extract the public certificate from Vagrant, you have to make sure you’re back into Windows command line.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\redis-ssl-test\\redis-vagrant&gt; vagrant ssh -c &quot;sudo cat &#x2F;etc&#x2F;stunnel&#x2F;redis-server.crt&quot; &gt; redis-server.crt</span><br></pre></td></tr></table></figure>\n\n<p>After that, the certificate file should be sitting next to the Vagrantfile.</p>\n<p><img src=\"./cert-file.png\"></p>\n<p>To install the certificate, you can follow this steps:</p>\n<ul>\n<li>Windows + R -&gt; mmc</li>\n<li>Click on File -&gt; Add/Remove Snap-In</li>\n<li>Click on Certificates and then “Add &gt;”</li>\n<li>A new dialog will popup, select “My user account” -&gt; Finish</li>\n<li>Click OK</li>\n<li>Under Console Root, make sure to expand “Certificates - Current User.”</li>\n<li>Click on “Trusted Root Certification Authorities” then on “Certificates” folder.</li>\n<li>You should see a lot of rows with CA</li>\n<li>Here click on “More Actions” at the right menu, then “All Tasks” and then “Import.”</li>\n<li>A new dialog will show, click on Next and then Browse for your certificate file.</li>\n<li>Click Next, and then Next again and Finish.</li>\n<li>You will get a Security Warning question, answer Yes</li>\n</ul>\n<p><img src=\"./import-cert.png\"></p>\n<p>I know, all those steps, there is a Powershell way to do it, but I will let that to you.</p>\n<p>Once you finished, you will see your new certificate as the first entry on the CA list.</p>\n<p>You can close the snap-in manager; you don’t need to save console settings.</p>\n<p>You’re ready to go to Visual Studio and use the newly created certificate.</p>\n<h2 id=\"C-simple-project\"><a href=\"#C-simple-project\" class=\"headerlink\" title=\"C# simple project\"></a>C# simple project</h2><p>You will create a simple C# Console application.<br>Go to Visual Studio and click on <em>File -&gt; New -&gt; Project -&gt; Console Application</em></p>\n<p>For your convenience you can set:</p>\n<ul>\n<li>Location: C:\\redis-ssl-test</li>\n<li>Name: RedisSslTest</li>\n<li>Create directory for solution: unchecked.</li>\n</ul>\n<p><img src=\"./redis-ssl-start.png\"></p>\n<p>You will need to add “StackExchange.Redis” NuGet package for this demo. </p>\n<p>Go to <em>Project -&gt; Manage NuGet packages… -&gt; Browse -&gt; Search -&gt; StackExchange.Redis</em> -&gt; Click Install.</p>\n<p>The source code for connecting to Redis goes like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Cryptography.X509Certificates;</span><br><span class=\"line\"><span class=\"keyword\">using</span> StackExchange.Redis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RedisSslTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> configurationOptions = <span class=\"keyword\">new</span> ConfigurationOptions</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                EndPoints = &#123; <span class=\"string\">&quot;10.0.15.10:6380&quot;</span> &#125;,</span><br><span class=\"line\">                Ssl = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            configurationOptions.CertificateSelection += OptionsOnCertificateSelection;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> redis = ConnectionMultiplexer.Connect(configurationOptions);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> db = redis.GetDatabase();</span><br><span class=\"line\">            db.ListLeftPush(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;from c#&quot;</span>);</span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> X509Certificate <span class=\"title\">OptionsOnCertificateSelection</span>(<span class=\"params\"><span class=\"built_in\">object</span> s, <span class=\"built_in\">string</span> t, X509CertificateCollection local, X509Certificate remote, <span class=\"built_in\">string</span>[] a</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> StoreName storeName = StoreName.Root;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> StoreLocation certificateStoreLocation = StoreLocation.CurrentUser;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> X509FindType findType = X509FindType.FindBySubjectName;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> certificateAuthorityStore = <span class=\"keyword\">new</span> X509Store(storeName, certificateStoreLocation);</span><br><span class=\"line\"></span><br><span class=\"line\">            certificateAuthorityStore.Open(OpenFlags.ReadOnly);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> certificatesInStore = certificateAuthorityStore</span><br><span class=\"line\">                .Certificates</span><br><span class=\"line\">                .Find(findType, <span class=\"string\">&quot;10.0.15.10&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> certificatesInStore[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The magic of this code happens at the handling of <code>CertificateSelection</code>.<br>Here we read the certificates installed on our computer, in this case, Current User,<br>and let the Redis package now it will need it to communicate through SSL to our local Vagrant machine.</p>\n<p>I wanted to show you the hard way of installing the certificate because when I was doing testing,<br>always got an exception if <strong>I didn’t install the certificate first as part of the machine.</strong></p>\n<p>The easier way to do it, and the way you will find it on examples is like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Cryptography.X509Certificates;</span><br><span class=\"line\"><span class=\"keyword\">using</span> StackExchange.Redis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RedisSslTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> configurationOptions = <span class=\"keyword\">new</span> ConfigurationOptions</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                EndPoints = &#123; <span class=\"string\">&quot;10.0.15.10:6380&quot;</span> &#125;,</span><br><span class=\"line\">                Ssl = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            configurationOptions.CertificateSelection += OptionsOnCertificateSelection;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> redis = ConnectionMultiplexer.Connect(configurationOptions);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> db = redis.GetDatabase();</span><br><span class=\"line\">            db.ListLeftPush(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;from c#&quot;</span>);</span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> X509Certificate <span class=\"title\">OptionsOnCertificateSelection</span>(<span class=\"params\"><span class=\"built_in\">object</span> s, <span class=\"built_in\">string</span> t, X509CertificateCollection local, X509Certificate remote, <span class=\"built_in\">string</span>[] a</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate2(<span class=\"string\">@&quot;C:\\redis-ssl-test\\redis-vagrant\\redis-server.crt&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Either way if you back to your Vagrant box, you can type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@redis-stunnel:~$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange test 0 -1</span><br><span class=\"line\">1) &quot;from c#&quot;</span><br><span class=\"line\">2) &quot;from c#&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./redis-cli-result.png\"></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Most of the problems I had while trying this setup was the <code>CertificateSelection</code> handler.  Most examples online never combine having a self-signed certificate that won’t communicate to SSL directly and debugging <code>StackExchange.Redis</code> made it it easy.</p>\n<p>My only complaint is that <code>StackExchange.Redis</code> swallows the exception that tells you <a href=\"https://github.com/StackExchange/StackExchange.Redis/blob/master/StackExchange.Redis/StackExchange/Redis/PhysicalConnection.cs#L792\">exactly what’s going on </a></p>"},{"title":"Convert node package with Typescript and Rollup","date":"2020-05-30T00:00:00.000Z","updated":"2020-05-30T00:00:00.000Z","_content":"\nI already had [a library](https://github.com/hyeomans/zuora-js) that I wanted to convert to Typescript. I picked Rollup.js to do my build process.\n\nFirst I installed the following packages:\n\n```bash\n> npm i -E -D rollup typescript @rollup/plugin-commonjs\\\n  @rollup/plugin-node-resolve rollup-plugin-typescript2\\\n  rollup-plugin-peer-deps-external\n```\n\nI ended up with:\n\n```\n* rollup-plugin-typescript2@0.27.1\n* rollup@2.11.2\n* typescript@3.9.3\n* rollup-plugin-peer-deps-external@2.2.2\n* @rollup/plugin-node-resolve@8.0.0\n* @rollup/plugin-commonjs@12.0.0\n```\n\nThen I created a `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"outDir\": \"build\",\n    \"module\": \"esnext\",\n    \"target\": \"es5\",\n    \"lib\": [\"es6\", \"dom\", \"es2016\", \"es2017\"],\n    \"sourceMap\": true,\n    \"allowJs\": false,\n    \"declaration\": true,\n    \"moduleResolution\": \"node\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true\n  },\n  \"include\": [\"src\"],\n  \"exclude\": [\"node_modules\", \"build\"]\n}\n```\n\nAlso a `rollup.config.js`:\n\n```javascript\nimport typescript from 'rollup-plugin-typescript2'\nimport external from 'rollup-plugin-peer-deps-external'\nimport commonjs from '@rollup/plugin-commonjs'\nimport resolve from '@rollup/plugin-node-resolve'\n\nimport pkg from './package.json'\n\nexport default {\n  input: 'src/index.ts',\n  output: [\n    {\n      file: pkg.main,\n      format: 'cjs',\n      exports: 'named',\n      sourcemap: true\n    },\n    {\n      file: pkg.module,\n      format: 'es',\n      exports: 'named',\n      sourcemap: true\n    }\n  ],\n  plugins: [\n    external(),\n    resolve(),\n    typescript({\n      rollupCommonJSResolveHack: true,\n      exclude: '**/__tests__/**',\n      clean: true\n    }),\n    commonjs({\n      include: ['node_modules/**']\n    })\n  ]\n}\n```\n\nModified my `package.json`:\n\n```json\n  \"main\": \"build/index.js\",\n  \"module\": \"build/index.es.js\",\n  \"jsnext:main\": \"build/index.es.js\",\n  \"files\": [\"build\"],\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    ...\n  }\n```\n\nFinally I created a dummy `index.ts` for testing:\n\n```ts\nfunction index() {\n  console.log('hello world')\n}\n```\n\nAnd ran:\n\n```bash\n> npm run build\n```\n\n### ESLINT\n\nI had to update eslint packages:\n\n```bash\nnpm i -E -D @typescript-eslint/parser @typescript-eslint/eslint-plugin\n```\n\nEnded up with:\n\n```\n* @typescript-eslint/parser@3.0.2\n* @typescript-eslint/eslint-plugin@3.0.2\n```\n\nAnd then modified my `.eslintrc.js`:\n\n```js\n...\nparser: '@typescript-eslint/parser',\n  extends: [\n    'standard',\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n  ],\n  plugins: ['@typescript-eslint'],\n  ...\n```\n\nYou can see the resulting branch here:\n\nhttps://github.com/hyeomans/zuora-js/tree/ts-rollup\n\nThanks for reading!","source":"_posts/migrate-node-package-typescript-rollup.md","raw":"---\ntitle: Convert node package with Typescript and Rollup\ndate: '2020-05-30'\nupdated: '2020-05-30'\n---\n\nI already had [a library](https://github.com/hyeomans/zuora-js) that I wanted to convert to Typescript. I picked Rollup.js to do my build process.\n\nFirst I installed the following packages:\n\n```bash\n> npm i -E -D rollup typescript @rollup/plugin-commonjs\\\n  @rollup/plugin-node-resolve rollup-plugin-typescript2\\\n  rollup-plugin-peer-deps-external\n```\n\nI ended up with:\n\n```\n* rollup-plugin-typescript2@0.27.1\n* rollup@2.11.2\n* typescript@3.9.3\n* rollup-plugin-peer-deps-external@2.2.2\n* @rollup/plugin-node-resolve@8.0.0\n* @rollup/plugin-commonjs@12.0.0\n```\n\nThen I created a `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"outDir\": \"build\",\n    \"module\": \"esnext\",\n    \"target\": \"es5\",\n    \"lib\": [\"es6\", \"dom\", \"es2016\", \"es2017\"],\n    \"sourceMap\": true,\n    \"allowJs\": false,\n    \"declaration\": true,\n    \"moduleResolution\": \"node\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true\n  },\n  \"include\": [\"src\"],\n  \"exclude\": [\"node_modules\", \"build\"]\n}\n```\n\nAlso a `rollup.config.js`:\n\n```javascript\nimport typescript from 'rollup-plugin-typescript2'\nimport external from 'rollup-plugin-peer-deps-external'\nimport commonjs from '@rollup/plugin-commonjs'\nimport resolve from '@rollup/plugin-node-resolve'\n\nimport pkg from './package.json'\n\nexport default {\n  input: 'src/index.ts',\n  output: [\n    {\n      file: pkg.main,\n      format: 'cjs',\n      exports: 'named',\n      sourcemap: true\n    },\n    {\n      file: pkg.module,\n      format: 'es',\n      exports: 'named',\n      sourcemap: true\n    }\n  ],\n  plugins: [\n    external(),\n    resolve(),\n    typescript({\n      rollupCommonJSResolveHack: true,\n      exclude: '**/__tests__/**',\n      clean: true\n    }),\n    commonjs({\n      include: ['node_modules/**']\n    })\n  ]\n}\n```\n\nModified my `package.json`:\n\n```json\n  \"main\": \"build/index.js\",\n  \"module\": \"build/index.es.js\",\n  \"jsnext:main\": \"build/index.es.js\",\n  \"files\": [\"build\"],\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    ...\n  }\n```\n\nFinally I created a dummy `index.ts` for testing:\n\n```ts\nfunction index() {\n  console.log('hello world')\n}\n```\n\nAnd ran:\n\n```bash\n> npm run build\n```\n\n### ESLINT\n\nI had to update eslint packages:\n\n```bash\nnpm i -E -D @typescript-eslint/parser @typescript-eslint/eslint-plugin\n```\n\nEnded up with:\n\n```\n* @typescript-eslint/parser@3.0.2\n* @typescript-eslint/eslint-plugin@3.0.2\n```\n\nAnd then modified my `.eslintrc.js`:\n\n```js\n...\nparser: '@typescript-eslint/parser',\n  extends: [\n    'standard',\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n  ],\n  plugins: ['@typescript-eslint'],\n  ...\n```\n\nYou can see the resulting branch here:\n\nhttps://github.com/hyeomans/zuora-js/tree/ts-rollup\n\nThanks for reading!","slug":"migrate-node-package-typescript-rollup","published":1,"_id":"ckii1sh3t00072jxy6kue1lgh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I already had <a href=\"https://github.com/hyeomans/zuora-js\">a library</a> that I wanted to convert to Typescript. I picked Rollup.js to do my build process.</p>\n<p>First I installed the following packages:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -E -D rollup typescript @rollup/plugin-commonjs\\</span><br><span class=\"line\">  @rollup/plugin-node-resolve rollup-plugin-typescript2\\</span><br><span class=\"line\">  rollup-plugin-peer-deps-external</span><br></pre></td></tr></table></figure>\n\n<p>I ended up with:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* rollup-plugin-typescript2@0.27.1</span><br><span class=\"line\">* rollup@2.11.2</span><br><span class=\"line\">* typescript@3.9.3</span><br><span class=\"line\">* rollup-plugin-peer-deps-external@2.2.2</span><br><span class=\"line\">* @rollup&#x2F;plugin-node-resolve@8.0.0</span><br><span class=\"line\">* @rollup&#x2F;plugin-commonjs@12.0.0</span><br></pre></td></tr></table></figure>\n\n<p>Then I created a <code>tsconfig.json</code>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;outDir&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span>: <span class=\"string\">&quot;es5&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;lib&quot;</span>: [<span class=\"string\">&quot;es6&quot;</span>, <span class=\"string\">&quot;dom&quot;</span>, <span class=\"string\">&quot;es2016&quot;</span>, <span class=\"string\">&quot;es2017&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;allowJs&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;declaration&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitReturns&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitThis&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;strictNullChecks&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;suppressImplicitAnyIndexErrors&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noUnusedLocals&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noUnusedParameters&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;esModuleInterop&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;allowSyntheticDefaultImports&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span>: [<span class=\"string\">&quot;src&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;node_modules&quot;</span>, <span class=\"string\">&quot;build&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Also a <code>rollup.config.js</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> typescript <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rollup-plugin-typescript2&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> external <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rollup-plugin-peer-deps-external&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> resolve <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pkg <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./package.json&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  input: <span class=\"string\">&#x27;src/index.ts&#x27;</span>,</span><br><span class=\"line\">  output: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      file: pkg.main,</span><br><span class=\"line\">      format: <span class=\"string\">&#x27;cjs&#x27;</span>,</span><br><span class=\"line\">      <span class=\"built_in\">exports</span>: <span class=\"string\">&#x27;named&#x27;</span>,</span><br><span class=\"line\">      sourcemap: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      file: pkg.module,</span><br><span class=\"line\">      format: <span class=\"string\">&#x27;es&#x27;</span>,</span><br><span class=\"line\">      <span class=\"built_in\">exports</span>: <span class=\"string\">&#x27;named&#x27;</span>,</span><br><span class=\"line\">      sourcemap: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    external(),</span><br><span class=\"line\">    resolve(),</span><br><span class=\"line\">    typescript(&#123;</span><br><span class=\"line\">      rollupCommonJSResolveHack: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      exclude: <span class=\"string\">&#x27;**/__tests__/**&#x27;</span>,</span><br><span class=\"line\">      clean: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    commonjs(&#123;</span><br><span class=\"line\">      include: [<span class=\"string\">&#x27;node_modules/**&#x27;</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Modified my <code>package.json</code>:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot;: &quot;build/index.js&quot;,</span><br><span class=\"line\">&quot;module&quot;: &quot;build/index.es.js&quot;,</span><br><span class=\"line\">&quot;jsnext:main&quot;: &quot;build/index.es.js&quot;,</span><br><span class=\"line\">&quot;files&quot;: [&quot;build&quot;],</span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;build&quot;: &quot;rollup -c&quot;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Finally I created a dummy <code>index.ts</code> for testing:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And ran:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm run build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ESLINT\"><a href=\"#ESLINT\" class=\"headerlink\" title=\"ESLINT\"></a>ESLINT</h3><p>I had to update eslint packages:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -E -D @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br></pre></td></tr></table></figure>\n\n<p>Ended up with:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* @typescript-eslint&#x2F;parser@3.0.2</span><br><span class=\"line\">* @typescript-eslint&#x2F;eslint-plugin@3.0.2</span><br></pre></td></tr></table></figure>\n\n<p>And then modified my <code>.eslintrc.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">parser: <span class=\"string\">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">extends</span>: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;standard&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;eslint:recommended&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  plugins: [<span class=\"string\">&#x27;@typescript-eslint&#x27;</span>],</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>You can see the resulting branch here:</p>\n<p><a href=\"https://github.com/hyeomans/zuora-js/tree/ts-rollup\">https://github.com/hyeomans/zuora-js/tree/ts-rollup</a></p>\n<p>Thanks for reading!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I already had <a href=\"https://github.com/hyeomans/zuora-js\">a library</a> that I wanted to convert to Typescript. I picked Rollup.js to do my build process.</p>\n<p>First I installed the following packages:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm i -E -D rollup typescript @rollup/plugin-commonjs\\</span><br><span class=\"line\">  @rollup/plugin-node-resolve rollup-plugin-typescript2\\</span><br><span class=\"line\">  rollup-plugin-peer-deps-external</span><br></pre></td></tr></table></figure>\n\n<p>I ended up with:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* rollup-plugin-typescript2@0.27.1</span><br><span class=\"line\">* rollup@2.11.2</span><br><span class=\"line\">* typescript@3.9.3</span><br><span class=\"line\">* rollup-plugin-peer-deps-external@2.2.2</span><br><span class=\"line\">* @rollup&#x2F;plugin-node-resolve@8.0.0</span><br><span class=\"line\">* @rollup&#x2F;plugin-commonjs@12.0.0</span><br></pre></td></tr></table></figure>\n\n<p>Then I created a <code>tsconfig.json</code>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;outDir&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span>: <span class=\"string\">&quot;es5&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;lib&quot;</span>: [<span class=\"string\">&quot;es6&quot;</span>, <span class=\"string\">&quot;dom&quot;</span>, <span class=\"string\">&quot;es2016&quot;</span>, <span class=\"string\">&quot;es2017&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;allowJs&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;declaration&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitReturns&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitThis&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;strictNullChecks&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;suppressImplicitAnyIndexErrors&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noUnusedLocals&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noUnusedParameters&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;esModuleInterop&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;allowSyntheticDefaultImports&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span>: [<span class=\"string\">&quot;src&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;node_modules&quot;</span>, <span class=\"string\">&quot;build&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Also a <code>rollup.config.js</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> typescript <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rollup-plugin-typescript2&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> external <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rollup-plugin-peer-deps-external&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@rollup/plugin-commonjs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> resolve <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@rollup/plugin-node-resolve&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pkg <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./package.json&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  input: <span class=\"string\">&#x27;src/index.ts&#x27;</span>,</span><br><span class=\"line\">  output: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      file: pkg.main,</span><br><span class=\"line\">      format: <span class=\"string\">&#x27;cjs&#x27;</span>,</span><br><span class=\"line\">      <span class=\"built_in\">exports</span>: <span class=\"string\">&#x27;named&#x27;</span>,</span><br><span class=\"line\">      sourcemap: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      file: pkg.module,</span><br><span class=\"line\">      format: <span class=\"string\">&#x27;es&#x27;</span>,</span><br><span class=\"line\">      <span class=\"built_in\">exports</span>: <span class=\"string\">&#x27;named&#x27;</span>,</span><br><span class=\"line\">      sourcemap: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    external(),</span><br><span class=\"line\">    resolve(),</span><br><span class=\"line\">    typescript(&#123;</span><br><span class=\"line\">      rollupCommonJSResolveHack: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      exclude: <span class=\"string\">&#x27;**/__tests__/**&#x27;</span>,</span><br><span class=\"line\">      clean: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    commonjs(&#123;</span><br><span class=\"line\">      include: [<span class=\"string\">&#x27;node_modules/**&#x27;</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Modified my <code>package.json</code>:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot;: &quot;build/index.js&quot;,</span><br><span class=\"line\">&quot;module&quot;: &quot;build/index.es.js&quot;,</span><br><span class=\"line\">&quot;jsnext:main&quot;: &quot;build/index.es.js&quot;,</span><br><span class=\"line\">&quot;files&quot;: [&quot;build&quot;],</span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;build&quot;: &quot;rollup -c&quot;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Finally I created a dummy <code>index.ts</code> for testing:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And ran:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm run build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ESLINT\"><a href=\"#ESLINT\" class=\"headerlink\" title=\"ESLINT\"></a>ESLINT</h3><p>I had to update eslint packages:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -E -D @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br></pre></td></tr></table></figure>\n\n<p>Ended up with:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* @typescript-eslint&#x2F;parser@3.0.2</span><br><span class=\"line\">* @typescript-eslint&#x2F;eslint-plugin@3.0.2</span><br></pre></td></tr></table></figure>\n\n<p>And then modified my <code>.eslintrc.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">parser: <span class=\"string\">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">extends</span>: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;standard&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;eslint:recommended&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  plugins: [<span class=\"string\">&#x27;@typescript-eslint&#x27;</span>],</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>You can see the resulting branch here:</p>\n<p><a href=\"https://github.com/hyeomans/zuora-js/tree/ts-rollup\">https://github.com/hyeomans/zuora-js/tree/ts-rollup</a></p>\n<p>Thanks for reading!</p>\n"},{"title":"Golang and interfaces misuse","date":"2020-01-18T00:00:00.000Z","updated":"2020-01-18T00:00:00.000Z","_content":"\nOne of my favorite things about Golang is the concept of interface. It's also one of my grievances every time I see them used as C#/Java interfaces.\n\nIt's typical to see a colossal interface defined at a package level file, for example, a package that defines CRUD operations for a User.\n\n```go\npackage db\n\nimport \"context\"\n\n// User --\ntype User struct {\n ID int\n Email string\n}\n\n// UsersDb pointless interface\ntype UsersDb interface {\n Get(ctx context.Context, id int) User\n Create(ctx context.Context, user User) User\n Update(ctx context.Context, id int, user User) User\n Delete(ctx context.Context, id int) bool\n}\n//... then we have the actual struct that \"implements\" the interface\n```\n\nWhat benefit does this bring to the package? Some say mocking capabilities. From what I've seen to mock that kind of package, you need a generator that generates and updates the mocks.\n\nA better approach is to follow what Golang wiki describes:\n\n> Go interfaces generally belong in the package that uses values of the interface type, not the package that implements those values.\n\nIn the case of our `db` package, we defined an interface without knowing if another consumer implements it. But how do we test? And I think that's the wrong question to ask, the right question is, how does my business logic require User information?\n\nLet's assume that we have a simple business requirement: when retrieving the name, the name its always uppercase.\n\nYou define a dumb `business` package, so you follow separation of concerns and get something like:\n\n```go\npackage business\n\nimport (\n \"context\"\n \"strings\"\n\n \"github.com/hyeomans/interface-misuses/db\"\n)\n\n// User --\ntype User struct {\n Name string\n}\n\n// Service --\ntype Service struct {\n //Here you will have logging\n //Counts, etc\n userService db.UserService\n}\n\n// NewService --\nfunc NewService(userService db.UserService) Service {\n return Service{\n userService: userService,\n }\n}\n\n// GetUser --\nfunc (s Service) GetUser(ctx context.Context, id int) User {\n dbUser := s.userService.Get(ctx, id)\n return User{Name: strings.ToUpper(dbUser.Name)}\n}\n```\n\nYou followed dependency injection and because you defined an `interface` of `db.UserService` you can generate mocks and get testing.\n\nHowever, there is much boilerplate code to get testing and mocking. There is a more straightforward way to do it, taking advantage of what Golang wiki says:\n\n> Do not define interfaces on the implementor side of an API \"for mocking\"; instead, design the API so that it can be tested using the public API of the real implementation.\nhttps://github.com/golang/go/wiki/CodeReviewComments#interfaces\n\nLet's define an interface with only *one* method in `business.Service`, then instead of injecting the whole `db.UserService`, substitute that with your new interface.\n\n```go\npackage business\n\nimport (\n \"context\"\n \"strings\"\n\n \"github.com/hyeomans/interface-misuses/db\"\n)\n\n// User --\ntype User struct {\n Name string\n}\n\n// UserGetter <---- This interface is defined in the\n// consumer side.\n// \"Do not define interfaces before they are used\"\ntype UserGetter interface {\n Get(ctx context.Context, id int) db.User\n}\n\n// Service --\ntype Service struct {\n userGetter UserGetter // <--- Change this\n}\n\n// NewService --\nfunc NewService(userGetter UserGetter) Service {\n return Service{\n userGetter: userGetter, // <----- Change this\n }\n}\n\n// GetUser --\nfunc (s Service) GetUser(ctx context.Context, id int) User {\n dbUser := s.userGetter.Get(ctx, id) // You still get a dbUser\n return User{Name: strings.ToUpper(dbUser.Name)}\n}\n```\n\nYour `main.go` file looks something like:\n\n```go\npackage main\n\nimport (\n \"context\"\n \"fmt\"\n\n \"github.com/hyeomans/interface-misuses/business\"\n \"github.com/hyeomans/interface-misuses/db\"\n)\n\nfunc main() {\n ctx := context.Background()\n userService := db.NewUserService()\n service := business.NewService(userService)\n\n user := service.GetUser(ctx, 1)\n fmt.Println(user.Name)\n}\n```\n\n## Conclusion\n\nGolang allows the perfect inversion of control, thanks to this pattern. In its essence, it is abstract, but once you start playing with it, it's powerful.\n\nIf you need more information about this pattern, there are other great blog posts:\n\nhttps://github.com/golang/go/wiki/CodeReviewComments#interfaces\nhttps://dave.cheney.net/2016/08/20/solid-go-design\nhttps://twitter.com/davecheney/status/1030790804011245569?lang=en\nhttps://www.ardanlabs.com/blog/2017/07/interface-semantics.html\nhttps://github.com/ardanlabs/gotraining/blob/master/topics/go/design/composition/pollution/example1/example1.go","source":"_posts/golang-and-interfaces-misuse.md","raw":"---\ntitle: Golang and interfaces misuse\ndate: '2020-01-18T00:00:00Z'\nupdated: '2020-01-18T00:00:00Z'\n---\n\nOne of my favorite things about Golang is the concept of interface. It's also one of my grievances every time I see them used as C#/Java interfaces.\n\nIt's typical to see a colossal interface defined at a package level file, for example, a package that defines CRUD operations for a User.\n\n```go\npackage db\n\nimport \"context\"\n\n// User --\ntype User struct {\n ID int\n Email string\n}\n\n// UsersDb pointless interface\ntype UsersDb interface {\n Get(ctx context.Context, id int) User\n Create(ctx context.Context, user User) User\n Update(ctx context.Context, id int, user User) User\n Delete(ctx context.Context, id int) bool\n}\n//... then we have the actual struct that \"implements\" the interface\n```\n\nWhat benefit does this bring to the package? Some say mocking capabilities. From what I've seen to mock that kind of package, you need a generator that generates and updates the mocks.\n\nA better approach is to follow what Golang wiki describes:\n\n> Go interfaces generally belong in the package that uses values of the interface type, not the package that implements those values.\n\nIn the case of our `db` package, we defined an interface without knowing if another consumer implements it. But how do we test? And I think that's the wrong question to ask, the right question is, how does my business logic require User information?\n\nLet's assume that we have a simple business requirement: when retrieving the name, the name its always uppercase.\n\nYou define a dumb `business` package, so you follow separation of concerns and get something like:\n\n```go\npackage business\n\nimport (\n \"context\"\n \"strings\"\n\n \"github.com/hyeomans/interface-misuses/db\"\n)\n\n// User --\ntype User struct {\n Name string\n}\n\n// Service --\ntype Service struct {\n //Here you will have logging\n //Counts, etc\n userService db.UserService\n}\n\n// NewService --\nfunc NewService(userService db.UserService) Service {\n return Service{\n userService: userService,\n }\n}\n\n// GetUser --\nfunc (s Service) GetUser(ctx context.Context, id int) User {\n dbUser := s.userService.Get(ctx, id)\n return User{Name: strings.ToUpper(dbUser.Name)}\n}\n```\n\nYou followed dependency injection and because you defined an `interface` of `db.UserService` you can generate mocks and get testing.\n\nHowever, there is much boilerplate code to get testing and mocking. There is a more straightforward way to do it, taking advantage of what Golang wiki says:\n\n> Do not define interfaces on the implementor side of an API \"for mocking\"; instead, design the API so that it can be tested using the public API of the real implementation.\nhttps://github.com/golang/go/wiki/CodeReviewComments#interfaces\n\nLet's define an interface with only *one* method in `business.Service`, then instead of injecting the whole `db.UserService`, substitute that with your new interface.\n\n```go\npackage business\n\nimport (\n \"context\"\n \"strings\"\n\n \"github.com/hyeomans/interface-misuses/db\"\n)\n\n// User --\ntype User struct {\n Name string\n}\n\n// UserGetter <---- This interface is defined in the\n// consumer side.\n// \"Do not define interfaces before they are used\"\ntype UserGetter interface {\n Get(ctx context.Context, id int) db.User\n}\n\n// Service --\ntype Service struct {\n userGetter UserGetter // <--- Change this\n}\n\n// NewService --\nfunc NewService(userGetter UserGetter) Service {\n return Service{\n userGetter: userGetter, // <----- Change this\n }\n}\n\n// GetUser --\nfunc (s Service) GetUser(ctx context.Context, id int) User {\n dbUser := s.userGetter.Get(ctx, id) // You still get a dbUser\n return User{Name: strings.ToUpper(dbUser.Name)}\n}\n```\n\nYour `main.go` file looks something like:\n\n```go\npackage main\n\nimport (\n \"context\"\n \"fmt\"\n\n \"github.com/hyeomans/interface-misuses/business\"\n \"github.com/hyeomans/interface-misuses/db\"\n)\n\nfunc main() {\n ctx := context.Background()\n userService := db.NewUserService()\n service := business.NewService(userService)\n\n user := service.GetUser(ctx, 1)\n fmt.Println(user.Name)\n}\n```\n\n## Conclusion\n\nGolang allows the perfect inversion of control, thanks to this pattern. In its essence, it is abstract, but once you start playing with it, it's powerful.\n\nIf you need more information about this pattern, there are other great blog posts:\n\nhttps://github.com/golang/go/wiki/CodeReviewComments#interfaces\nhttps://dave.cheney.net/2016/08/20/solid-go-design\nhttps://twitter.com/davecheney/status/1030790804011245569?lang=en\nhttps://www.ardanlabs.com/blog/2017/07/interface-semantics.html\nhttps://github.com/ardanlabs/gotraining/blob/master/topics/go/design/composition/pollution/example1/example1.go","slug":"golang-and-interfaces-misuse","published":1,"_id":"ckii1sngv00092jxy1spacfp0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>One of my favorite things about Golang is the concept of interface. It’s also one of my grievances every time I see them used as C#/Java interfaces.</p>\n<p>It’s typical to see a colossal interface defined at a package level file, for example, a package that defines CRUD operations for a User.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User --</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> ID <span class=\"keyword\">int</span></span><br><span class=\"line\"> Email <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// UsersDb pointless interface</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> UsersDb <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\"> Get(ctx context.Context, id <span class=\"keyword\">int</span>) User</span><br><span class=\"line\"> Create(ctx context.Context, user User) User</span><br><span class=\"line\"> Update(ctx context.Context, id <span class=\"keyword\">int</span>, user User) User</span><br><span class=\"line\"> Delete(ctx context.Context, id <span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//... then we have the actual struct that &quot;implements&quot; the interface</span></span><br></pre></td></tr></table></figure>\n\n<p>What benefit does this bring to the package? Some say mocking capabilities. From what I’ve seen to mock that kind of package, you need a generator that generates and updates the mocks.</p>\n<p>A better approach is to follow what Golang wiki describes:</p>\n<blockquote>\n<p>Go interfaces generally belong in the package that uses values of the interface type, not the package that implements those values.</p>\n</blockquote>\n<p>In the case of our <code>db</code> package, we defined an interface without knowing if another consumer implements it. But how do we test? And I think that’s the wrong question to ask, the right question is, how does my business logic require User information?</p>\n<p>Let’s assume that we have a simple business requirement: when retrieving the name, the name its always uppercase.</p>\n<p>You define a dumb <code>business</code> package, so you follow separation of concerns and get something like:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> business</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"> <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\"> <span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">&quot;github.com/hyeomans/interface-misuses/db&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User --</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> Name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Service --</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Service <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//Here you will have logging</span></span><br><span class=\"line\"> <span class=\"comment\">//Counts, etc</span></span><br><span class=\"line\"> userService db.UserService</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewService --</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewService</span><span class=\"params\">(userService db.UserService)</span> <span class=\"title\">Service</span></span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> Service&#123;</span><br><span class=\"line\"> userService: userService,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetUser --</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s Service)</span> <span class=\"title\">GetUser</span><span class=\"params\">(ctx context.Context, id <span class=\"keyword\">int</span>)</span> <span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\"> dbUser := s.userService.Get(ctx, id)</span><br><span class=\"line\"> <span class=\"keyword\">return</span> User&#123;Name: strings.ToUpper(dbUser.Name)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You followed dependency injection and because you defined an <code>interface</code> of <code>db.UserService</code> you can generate mocks and get testing.</p>\n<p>However, there is much boilerplate code to get testing and mocking. There is a more straightforward way to do it, taking advantage of what Golang wiki says:</p>\n<blockquote>\n<p>Do not define interfaces on the implementor side of an API “for mocking”; instead, design the API so that it can be tested using the public API of the real implementation.<br><a href=\"https://github.com/golang/go/wiki/CodeReviewComments#interfaces\">https://github.com/golang/go/wiki/CodeReviewComments#interfaces</a></p>\n</blockquote>\n<p>Let’s define an interface with only <em>one</em> method in <code>business.Service</code>, then instead of injecting the whole <code>db.UserService</code>, substitute that with your new interface.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> business</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"> <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\"> <span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">&quot;github.com/hyeomans/interface-misuses/db&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User --</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> Name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// UserGetter &lt;---- This interface is defined in the</span></span><br><span class=\"line\"><span class=\"comment\">// consumer side.</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;Do not define interfaces before they are used&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserGetter <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\"> Get(ctx context.Context, id <span class=\"keyword\">int</span>) db.User</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Service --</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Service <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> userGetter UserGetter <span class=\"comment\">// &lt;--- Change this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewService --</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewService</span><span class=\"params\">(userGetter UserGetter)</span> <span class=\"title\">Service</span></span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> Service&#123;</span><br><span class=\"line\"> userGetter: userGetter, <span class=\"comment\">// &lt;----- Change this</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetUser --</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s Service)</span> <span class=\"title\">GetUser</span><span class=\"params\">(ctx context.Context, id <span class=\"keyword\">int</span>)</span> <span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\"> dbUser := s.userGetter.Get(ctx, id) <span class=\"comment\">// You still get a dbUser</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> User&#123;Name: strings.ToUpper(dbUser.Name)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Your <code>main.go</code> file looks something like:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"> <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\"> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">&quot;github.com/hyeomans/interface-misuses/business&quot;</span></span><br><span class=\"line\"> <span class=\"string\">&quot;github.com/hyeomans/interface-misuses/db&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"> ctx := context.Background()</span><br><span class=\"line\"> userService := db.NewUserService()</span><br><span class=\"line\"> service := business.NewService(userService)</span><br><span class=\"line\"></span><br><span class=\"line\"> user := service.GetUser(ctx, <span class=\"number\">1</span>)</span><br><span class=\"line\"> fmt.Println(user.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Golang allows the perfect inversion of control, thanks to this pattern. In its essence, it is abstract, but once you start playing with it, it’s powerful.</p>\n<p>If you need more information about this pattern, there are other great blog posts:</p>\n<p><a href=\"https://github.com/golang/go/wiki/CodeReviewComments#interfaces\">https://github.com/golang/go/wiki/CodeReviewComments#interfaces</a><br><a href=\"https://dave.cheney.net/2016/08/20/solid-go-design\">https://dave.cheney.net/2016/08/20/solid-go-design</a><br><a href=\"https://twitter.com/davecheney/status/1030790804011245569?lang=en\">https://twitter.com/davecheney/status/1030790804011245569?lang=en</a><br><a href=\"https://www.ardanlabs.com/blog/2017/07/interface-semantics.html\">https://www.ardanlabs.com/blog/2017/07/interface-semantics.html</a><br><a href=\"https://github.com/ardanlabs/gotraining/blob/master/topics/go/design/composition/pollution/example1/example1.go\">https://github.com/ardanlabs/gotraining/blob/master/topics/go/design/composition/pollution/example1/example1.go</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>One of my favorite things about Golang is the concept of interface. It’s also one of my grievances every time I see them used as C#/Java interfaces.</p>\n<p>It’s typical to see a colossal interface defined at a package level file, for example, a package that defines CRUD operations for a User.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User --</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> ID <span class=\"keyword\">int</span></span><br><span class=\"line\"> Email <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// UsersDb pointless interface</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> UsersDb <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\"> Get(ctx context.Context, id <span class=\"keyword\">int</span>) User</span><br><span class=\"line\"> Create(ctx context.Context, user User) User</span><br><span class=\"line\"> Update(ctx context.Context, id <span class=\"keyword\">int</span>, user User) User</span><br><span class=\"line\"> Delete(ctx context.Context, id <span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//... then we have the actual struct that &quot;implements&quot; the interface</span></span><br></pre></td></tr></table></figure>\n\n<p>What benefit does this bring to the package? Some say mocking capabilities. From what I’ve seen to mock that kind of package, you need a generator that generates and updates the mocks.</p>\n<p>A better approach is to follow what Golang wiki describes:</p>\n<blockquote>\n<p>Go interfaces generally belong in the package that uses values of the interface type, not the package that implements those values.</p>\n</blockquote>\n<p>In the case of our <code>db</code> package, we defined an interface without knowing if another consumer implements it. But how do we test? And I think that’s the wrong question to ask, the right question is, how does my business logic require User information?</p>\n<p>Let’s assume that we have a simple business requirement: when retrieving the name, the name its always uppercase.</p>\n<p>You define a dumb <code>business</code> package, so you follow separation of concerns and get something like:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> business</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"> <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\"> <span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">&quot;github.com/hyeomans/interface-misuses/db&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User --</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> Name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Service --</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Service <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//Here you will have logging</span></span><br><span class=\"line\"> <span class=\"comment\">//Counts, etc</span></span><br><span class=\"line\"> userService db.UserService</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewService --</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewService</span><span class=\"params\">(userService db.UserService)</span> <span class=\"title\">Service</span></span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> Service&#123;</span><br><span class=\"line\"> userService: userService,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetUser --</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s Service)</span> <span class=\"title\">GetUser</span><span class=\"params\">(ctx context.Context, id <span class=\"keyword\">int</span>)</span> <span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\"> dbUser := s.userService.Get(ctx, id)</span><br><span class=\"line\"> <span class=\"keyword\">return</span> User&#123;Name: strings.ToUpper(dbUser.Name)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You followed dependency injection and because you defined an <code>interface</code> of <code>db.UserService</code> you can generate mocks and get testing.</p>\n<p>However, there is much boilerplate code to get testing and mocking. There is a more straightforward way to do it, taking advantage of what Golang wiki says:</p>\n<blockquote>\n<p>Do not define interfaces on the implementor side of an API “for mocking”; instead, design the API so that it can be tested using the public API of the real implementation.<br><a href=\"https://github.com/golang/go/wiki/CodeReviewComments#interfaces\">https://github.com/golang/go/wiki/CodeReviewComments#interfaces</a></p>\n</blockquote>\n<p>Let’s define an interface with only <em>one</em> method in <code>business.Service</code>, then instead of injecting the whole <code>db.UserService</code>, substitute that with your new interface.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> business</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"> <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\"> <span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">&quot;github.com/hyeomans/interface-misuses/db&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User --</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> Name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// UserGetter &lt;---- This interface is defined in the</span></span><br><span class=\"line\"><span class=\"comment\">// consumer side.</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;Do not define interfaces before they are used&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserGetter <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\"> Get(ctx context.Context, id <span class=\"keyword\">int</span>) db.User</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Service --</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Service <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> userGetter UserGetter <span class=\"comment\">// &lt;--- Change this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewService --</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewService</span><span class=\"params\">(userGetter UserGetter)</span> <span class=\"title\">Service</span></span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> Service&#123;</span><br><span class=\"line\"> userGetter: userGetter, <span class=\"comment\">// &lt;----- Change this</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetUser --</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s Service)</span> <span class=\"title\">GetUser</span><span class=\"params\">(ctx context.Context, id <span class=\"keyword\">int</span>)</span> <span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\"> dbUser := s.userGetter.Get(ctx, id) <span class=\"comment\">// You still get a dbUser</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> User&#123;Name: strings.ToUpper(dbUser.Name)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Your <code>main.go</code> file looks something like:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"> <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\"> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">&quot;github.com/hyeomans/interface-misuses/business&quot;</span></span><br><span class=\"line\"> <span class=\"string\">&quot;github.com/hyeomans/interface-misuses/db&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"> ctx := context.Background()</span><br><span class=\"line\"> userService := db.NewUserService()</span><br><span class=\"line\"> service := business.NewService(userService)</span><br><span class=\"line\"></span><br><span class=\"line\"> user := service.GetUser(ctx, <span class=\"number\">1</span>)</span><br><span class=\"line\"> fmt.Println(user.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Golang allows the perfect inversion of control, thanks to this pattern. In its essence, it is abstract, but once you start playing with it, it’s powerful.</p>\n<p>If you need more information about this pattern, there are other great blog posts:</p>\n<p><a href=\"https://github.com/golang/go/wiki/CodeReviewComments#interfaces\">https://github.com/golang/go/wiki/CodeReviewComments#interfaces</a><br><a href=\"https://dave.cheney.net/2016/08/20/solid-go-design\">https://dave.cheney.net/2016/08/20/solid-go-design</a><br><a href=\"https://twitter.com/davecheney/status/1030790804011245569?lang=en\">https://twitter.com/davecheney/status/1030790804011245569?lang=en</a><br><a href=\"https://www.ardanlabs.com/blog/2017/07/interface-semantics.html\">https://www.ardanlabs.com/blog/2017/07/interface-semantics.html</a><br><a href=\"https://github.com/ardanlabs/gotraining/blob/master/topics/go/design/composition/pollution/example1/example1.go\">https://github.com/ardanlabs/gotraining/blob/master/topics/go/design/composition/pollution/example1/example1.go</a></p>\n"},{"title":"ES6 Arrow functions","date":"2015-09-21T00:00:00.000Z","updated":"2015-09-21T00:00:00.000Z","_content":"\nLast night I was reading this post: [ES6 arrow functions, syntax and lexical scoping](http://toddmotto.com/es6-arrow-functions-syntaxes-and-lexical-scoping/) and going through the comments I saw this question:\n\n```\nso arrow functions always inherit scope?\n```\n\nThe answer was by Barney: `always`.\n\nI went to the console and typed:\n\n```\nnvm use 4\nnode\nvar doSome = () => { console.log(this.x) }\ndoSome.call({x: 'hello'});\nglobal.x = 'hello';\ndoSome.call({x: 'good bye'});\n```\n\nCould you guess what is going to be printed?\n\nI could replicate this on ES5 without fat arrow function.\n\n```\nnvm use 0.10\nnode\nvar doSome = function() { console.log(this.x) }.bind(void(0));\n\ndoSome.call({x: 'hello'});\n\nglobal.x = 'hello';\ndoSome.call({x: 'good bye'});\n```\n\nWhat do you think? What does Babel does?\n","source":"_posts/es6-arrow-functions.md","raw":"---\ntitle: ES6 Arrow functions\ndate: '2015-09-21'\nupdated: '2015-09-21'\n---\n\nLast night I was reading this post: [ES6 arrow functions, syntax and lexical scoping](http://toddmotto.com/es6-arrow-functions-syntaxes-and-lexical-scoping/) and going through the comments I saw this question:\n\n```\nso arrow functions always inherit scope?\n```\n\nThe answer was by Barney: `always`.\n\nI went to the console and typed:\n\n```\nnvm use 4\nnode\nvar doSome = () => { console.log(this.x) }\ndoSome.call({x: 'hello'});\nglobal.x = 'hello';\ndoSome.call({x: 'good bye'});\n```\n\nCould you guess what is going to be printed?\n\nI could replicate this on ES5 without fat arrow function.\n\n```\nnvm use 0.10\nnode\nvar doSome = function() { console.log(this.x) }.bind(void(0));\n\ndoSome.call({x: 'hello'});\n\nglobal.x = 'hello';\ndoSome.call({x: 'good bye'});\n```\n\nWhat do you think? What does Babel does?\n","slug":"es6-arrow-functions","published":1,"_id":"ckii1stvo000b2jxy5lsuhld2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Last night I was reading this post: <a href=\"http://toddmotto.com/es6-arrow-functions-syntaxes-and-lexical-scoping/\">ES6 arrow functions, syntax and lexical scoping</a> and going through the comments I saw this question:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">so arrow functions always inherit scope?</span><br></pre></td></tr></table></figure>\n\n<p>The answer was by Barney: <code>always</code>.</p>\n<p>I went to the console and typed:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 4</span><br><span class=\"line\">node</span><br><span class=\"line\">var doSome &#x3D; () &#x3D;&gt; &#123; console.log(this.x) &#125;</span><br><span class=\"line\">doSome.call(&#123;x: &#39;hello&#39;&#125;);</span><br><span class=\"line\">global.x &#x3D; &#39;hello&#39;;</span><br><span class=\"line\">doSome.call(&#123;x: &#39;good bye&#39;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Could you guess what is going to be printed?</p>\n<p>I could replicate this on ES5 without fat arrow function.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 0.10</span><br><span class=\"line\">node</span><br><span class=\"line\">var doSome &#x3D; function() &#123; console.log(this.x) &#125;.bind(void(0));</span><br><span class=\"line\"></span><br><span class=\"line\">doSome.call(&#123;x: &#39;hello&#39;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">global.x &#x3D; &#39;hello&#39;;</span><br><span class=\"line\">doSome.call(&#123;x: &#39;good bye&#39;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>What do you think? What does Babel does?</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Last night I was reading this post: <a href=\"http://toddmotto.com/es6-arrow-functions-syntaxes-and-lexical-scoping/\">ES6 arrow functions, syntax and lexical scoping</a> and going through the comments I saw this question:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">so arrow functions always inherit scope?</span><br></pre></td></tr></table></figure>\n\n<p>The answer was by Barney: <code>always</code>.</p>\n<p>I went to the console and typed:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 4</span><br><span class=\"line\">node</span><br><span class=\"line\">var doSome &#x3D; () &#x3D;&gt; &#123; console.log(this.x) &#125;</span><br><span class=\"line\">doSome.call(&#123;x: &#39;hello&#39;&#125;);</span><br><span class=\"line\">global.x &#x3D; &#39;hello&#39;;</span><br><span class=\"line\">doSome.call(&#123;x: &#39;good bye&#39;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Could you guess what is going to be printed?</p>\n<p>I could replicate this on ES5 without fat arrow function.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 0.10</span><br><span class=\"line\">node</span><br><span class=\"line\">var doSome &#x3D; function() &#123; console.log(this.x) &#125;.bind(void(0));</span><br><span class=\"line\"></span><br><span class=\"line\">doSome.call(&#123;x: &#39;hello&#39;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">global.x &#x3D; &#39;hello&#39;;</span><br><span class=\"line\">doSome.call(&#123;x: &#39;good bye&#39;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>What do you think? What does Babel does?</p>\n"}],"PostAsset":[{"_id":"source/_posts/software-as-stitching/stitching-2.jpg","slug":"stitching-2.jpg","post":"ckii1o4qs000107xyf5g40d5a","modified":0,"renderable":0},{"_id":"source/_posts/software-as-stitching/stitching-3.jpg","slug":"stitching-3.jpg","post":"ckii1o4qs000107xyf5g40d5a","modified":0,"renderable":0},{"_id":"source/_posts/software-as-stitching/stitching.jpg","slug":"stitching.jpg","post":"ckii1o4qs000107xyf5g40d5a","modified":0,"renderable":0},{"_id":"source/_posts/redis-stunnel-and-c/cert-file.png","slug":"cert-file.png","post":"ckii1safz00052jxygttsafkv","modified":0,"renderable":0},{"_id":"source/_posts/redis-stunnel-and-c/import-cert.png","slug":"import-cert.png","post":"ckii1safz00052jxygttsafkv","modified":0,"renderable":0},{"_id":"source/_posts/redis-stunnel-and-c/redis-cli-result.png","slug":"redis-cli-result.png","post":"ckii1safz00052jxygttsafkv","modified":0,"renderable":0},{"_id":"source/_posts/redis-stunnel-and-c/redis-ssl-start.png","slug":"redis-ssl-start.png","post":"ckii1safz00052jxygttsafkv","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}